{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InMemoryLRUCache = void 0;\nconst lru_cache_1 = __importDefault(require(\"lru-cache\"));\nfunction defaultLengthCalculation(item) {\n  if (Array.isArray(item) || typeof item === 'string') {\n    return item.length;\n  }\n  return 1;\n}\nclass InMemoryLRUCache {\n  constructor() {\n    let {\n      maxSize = Infinity,\n      sizeCalculator = defaultLengthCalculation,\n      onDispose\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.store = new lru_cache_1.default({\n      max: maxSize,\n      length: sizeCalculator,\n      dispose: onDispose\n    });\n  }\n  get(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.store.get(key);\n    });\n  }\n  set(key, value, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const maxAge = options && options.ttl && options.ttl * 1000;\n      this.store.set(key, value, maxAge);\n    });\n  }\n  delete(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.store.del(key);\n    });\n  }\n  flush() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.store.reset();\n    });\n  }\n  getTotalSize() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.store.length;\n    });\n  }\n}\nexports.InMemoryLRUCache = InMemoryLRUCache;","map":{"version":3,"names":["lru_cache_1","__importDefault","require","defaultLengthCalculation","item","Array","isArray","length","InMemoryLRUCache","constructor","maxSize","Infinity","sizeCalculator","onDispose","arguments","undefined","store","default","max","dispose","get","key","set","value","options","maxAge","ttl","delete","del","flush","reset","getTotalSize","exports"],"sources":["/Users/venusrodin/node_modules/apollo-server-caching/src/InMemoryLRUCache.ts"],"sourcesContent":["import LRUCache from 'lru-cache';\nimport { TestableKeyValueCache } from './KeyValueCache';\n\nfunction defaultLengthCalculation(item: any) {\n  if (Array.isArray(item) || typeof item === 'string') {\n    return item.length;\n  }\n\n  // Go with the lru-cache default \"naive\" size, in lieu anything better:\n  //   https://github.com/isaacs/node-lru-cache/blob/a71be6cd/index.js#L17\n  return 1;\n}\n\nexport class InMemoryLRUCache<V = string> implements TestableKeyValueCache<V> {\n  private store: LRUCache<string, V>;\n\n  // TODO: Define reasonable default max size of the cache\n  constructor({\n    maxSize = Infinity,\n    sizeCalculator = defaultLengthCalculation,\n    onDispose,\n  }: {\n    maxSize?: number;\n    sizeCalculator?: (value: V, key: string) => number;\n    onDispose?: (key: string, value: V) => void;\n  } = {}) {\n    this.store = new LRUCache({\n      max: maxSize,\n      length: sizeCalculator,\n      dispose: onDispose,\n    });\n  }\n\n  async get(key: string) {\n    return this.store.get(key);\n  }\n  async set(key: string, value: V, options?: { ttl?: number }) {\n    const maxAge = options && options.ttl && options.ttl * 1000;\n    this.store.set(key, value, maxAge);\n  }\n  async delete(key: string) {\n    this.store.del(key);\n  }\n\n  // Drops all data from the cache. This should only be used by test suites ---\n  // production code should never drop all data from an end user cache.\n  async flush(): Promise<void> {\n    this.store.reset();\n  }\n  async getTotalSize() {\n    return this.store.length;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,WAAA,GAAAC,eAAA,CAAAC,OAAA;AAGA,SAASC,wBAAwBA,CAACC,IAAS;EACzC,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IACnD,OAAOA,IAAI,CAACG,MAAM;;EAKpB,OAAO,CAAC;AACV;AAEA,MAAaC,gBAAgB;EAI3BC,YAAA,EAQM;IAAA,IARM;MACVC,OAAO,GAAGC,QAAQ;MAClBC,cAAc,GAAGT,wBAAwB;MACzCU;IAAS,IAAAC,SAAA,CAAAP,MAAA,QAAAO,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAKP,EAAE;IACJ,IAAI,CAACE,KAAK,GAAG,IAAIhB,WAAA,CAAAiB,OAAQ,CAAC;MACxBC,GAAG,EAAER,OAAO;MACZH,MAAM,EAAEK,cAAc;MACtBO,OAAO,EAAEN;KACV,CAAC;EACJ;EAEMO,GAAGA,CAACC,GAAW;;MACnB,OAAO,IAAI,CAACL,KAAK,CAACI,GAAG,CAACC,GAAG,CAAC;IAC5B,CAAC;;EACKC,GAAGA,CAACD,GAAW,EAAEE,KAAQ,EAAEC,OAA0B;;MACzD,MAAMC,MAAM,GAAGD,OAAO,IAAIA,OAAO,CAACE,GAAG,IAAIF,OAAO,CAACE,GAAG,GAAG,IAAI;MAC3D,IAAI,CAACV,KAAK,CAACM,GAAG,CAACD,GAAG,EAAEE,KAAK,EAAEE,MAAM,CAAC;IACpC,CAAC;;EACKE,MAAMA,CAACN,GAAW;;MACtB,IAAI,CAACL,KAAK,CAACY,GAAG,CAACP,GAAG,CAAC;IACrB,CAAC;;EAIKQ,KAAKA,CAAA;;MACT,IAAI,CAACb,KAAK,CAACc,KAAK,EAAE;IACpB,CAAC;;EACKC,YAAYA,CAAA;;MAChB,OAAO,IAAI,CAACf,KAAK,CAACT,MAAM;IAC1B,CAAC;;;AAtCHyB,OAAA,CAAAxB,gBAAA,GAAAA,gBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}