{"ast":null,"code":"const express = require('express');\nconst {\n  ApolloServer\n} = require('apollo-server-express');\nconst path = require('path');\nconst db = require('../../config/connection');\nconst {\n  typeDefs,\n  resolvers\n} = require('./schemas');\nconst {\n  authMiddleware\n} = require('../../utils/auth');\nconst app = express();\nconst PORT = process.env.PORT || 3001;\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context: authMiddleware\n});\nserver.applyMiddleware({\n  app\n});\napp.use(express.urlencoded({\n  extended: true\n}));\napp.use(express.json());\nif (process.env.NODE_ENV === 'production') {\n  app.use(express.static(path.join(__dirname, '../client/build')));\n}\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, '../client/build/index.html'));\n});\ndb.once('open', () => {\n  app.listen(PORT, () => {\n    console.log(`API server running on port ${PORT}!`);\n    console.log(`Use GraphQL at http://localhost:${PORT}${server.graphqlPath}`);\n  });\n});","map":{"version":3,"names":["express","require","ApolloServer","path","db","typeDefs","resolvers","authMiddleware","app","PORT","process","env","server","context","applyMiddleware","use","urlencoded","extended","json","NODE_ENV","static","join","__dirname","get","req","res","sendFile","once","listen","console","log","graphqlPath"],"sources":["/Users/venusrodin/Social-Network/client/src/index.js"],"sourcesContent":["const express = require('express');\nconst { ApolloServer } = require('apollo-server-express');\nconst path = require('path');\nconst db = require('../../config/connection');\nconst { typeDefs, resolvers } = require('./schemas');\nconst { authMiddleware } = require('../../utils/auth');\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context: authMiddleware\n});\n\nserver.applyMiddleware({ app });\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\nif (process.env.NODE_ENV === 'production') {\n  app.use(express.static(path.join(__dirname, '../client/build')));\n}\n\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, '../client/build/index.html'));\n});\n\ndb.once('open', () => {\n  app.listen(PORT, () => {\n    console.log(`API server running on port ${PORT}!`);\n    console.log(`Use GraphQL at http://localhost:${PORT}${server.graphqlPath}`);\n  });\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAM;EAAEC;AAAa,CAAC,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AACzD,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,EAAE,GAAGH,OAAO,CAAC,yBAAyB,CAAC;AAC7C,MAAM;EAAEI,QAAQ;EAAEC;AAAU,CAAC,GAAGL,OAAO,CAAC,WAAW,CAAC;AACpD,MAAM;EAAEM;AAAe,CAAC,GAAGN,OAAO,CAAC,kBAAkB,CAAC;AAEtD,MAAMO,GAAG,GAAGR,OAAO,EAAE;AACrB,MAAMS,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;AAErC,MAAMG,MAAM,GAAG,IAAIV,YAAY,CAAC;EAC9BG,QAAQ;EACRC,SAAS;EACTO,OAAO,EAAEN;AACX,CAAC,CAAC;AAEFK,MAAM,CAACE,eAAe,CAAC;EAAEN;AAAI,CAAC,CAAC;AAE/BA,GAAG,CAACO,GAAG,CAACf,OAAO,CAACgB,UAAU,CAAC;EAAEC,QAAQ,EAAE;AAAK,CAAC,CAAC,CAAC;AAC/CT,GAAG,CAACO,GAAG,CAACf,OAAO,CAACkB,IAAI,EAAE,CAAC;AAEvB,IAAIR,OAAO,CAACC,GAAG,CAACQ,QAAQ,KAAK,YAAY,EAAE;EACzCX,GAAG,CAACO,GAAG,CAACf,OAAO,CAACoB,MAAM,CAACjB,IAAI,CAACkB,IAAI,CAACC,SAAS,EAAE,iBAAiB,CAAC,CAAC,CAAC;AAClE;AAEAd,GAAG,CAACe,GAAG,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACzBA,GAAG,CAACC,QAAQ,CAACvB,IAAI,CAACkB,IAAI,CAACC,SAAS,EAAE,4BAA4B,CAAC,CAAC;AAClE,CAAC,CAAC;AAEFlB,EAAE,CAACuB,IAAI,CAAC,MAAM,EAAE,MAAM;EACpBnB,GAAG,CAACoB,MAAM,CAACnB,IAAI,EAAE,MAAM;IACrBoB,OAAO,CAACC,GAAG,CAAE,8BAA6BrB,IAAK,GAAE,CAAC;IAClDoB,OAAO,CAACC,GAAG,CAAE,mCAAkCrB,IAAK,GAAEG,MAAM,CAACmB,WAAY,EAAC,CAAC;EAC7E,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}