{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar graphql_1 = require(\"graphql\");\nvar makeExecutableSchema_1 = require(\"../makeExecutableSchema\");\nvar schemaRecreation_1 = require(\"./schemaRecreation\");\nvar delegateToSchema_1 = require(\"./delegateToSchema\");\nvar typeFromAST_1 = require(\"./typeFromAST\");\nvar transforms_1 = require(\"../transforms\");\nvar mergeDeep_1 = require(\"../mergeDeep\");\nvar schemaVisitor_1 = require(\"../schemaVisitor\");\nfunction mergeSchemas(_a) {\n  var schemas = _a.schemas,\n    onTypeConflict = _a.onTypeConflict,\n    resolvers = _a.resolvers,\n    schemaDirectives = _a.schemaDirectives,\n    inheritResolversFromInterfaces = _a.inheritResolversFromInterfaces,\n    mergeDirectives = _a.mergeDirectives;\n  return mergeSchemasImplementation({\n    schemas: schemas,\n    resolvers: resolvers,\n    schemaDirectives: schemaDirectives,\n    inheritResolversFromInterfaces: inheritResolversFromInterfaces,\n    mergeDirectives: mergeDirectives\n  });\n}\nexports.default = mergeSchemas;\nfunction mergeSchemasImplementation(_a) {\n  var schemas = _a.schemas,\n    resolvers = _a.resolvers,\n    schemaDirectives = _a.schemaDirectives,\n    inheritResolversFromInterfaces = _a.inheritResolversFromInterfaces,\n    mergeDirectives = _a.mergeDirectives;\n  var allSchemas = [];\n  var typeCandidates = {};\n  var types = {};\n  var extensions = [];\n  var directives = [];\n  var fragments = [];\n  var resolveType = schemaRecreation_1.createResolveType(function (name) {\n    if (types[name] === undefined) {\n      throw new Error(\"Can't find type \" + name + \".\");\n    }\n    return types[name];\n  });\n  schemas.forEach(function (schema) {\n    if (schema instanceof graphql_1.GraphQLSchema) {\n      allSchemas.push(schema);\n      var queryType_1 = schema.getQueryType();\n      var mutationType_1 = schema.getMutationType();\n      var subscriptionType_1 = schema.getSubscriptionType();\n      if (queryType_1) {\n        addTypeCandidate(typeCandidates, 'Query', {\n          schema: schema,\n          type: queryType_1\n        });\n      }\n      if (mutationType_1) {\n        addTypeCandidate(typeCandidates, 'Mutation', {\n          schema: schema,\n          type: mutationType_1\n        });\n      }\n      if (subscriptionType_1) {\n        addTypeCandidate(typeCandidates, 'Subscription', {\n          schema: schema,\n          type: subscriptionType_1\n        });\n      }\n      if (mergeDirectives) {\n        var directiveInstances = schema.getDirectives();\n        directiveInstances.forEach(function (directive) {\n          directives.push(directive);\n        });\n      }\n      var typeMap_1 = schema.getTypeMap();\n      Object.keys(typeMap_1).forEach(function (typeName) {\n        var type = typeMap_1[typeName];\n        if (graphql_1.isNamedType(type) && graphql_1.getNamedType(type).name.slice(0, 2) !== '__' && type !== queryType_1 && type !== mutationType_1 && type !== subscriptionType_1) {\n          addTypeCandidate(typeCandidates, type.name, {\n            schema: schema,\n            type: type\n          });\n        }\n      });\n    } else if (typeof schema === 'string' || schema && schema.kind === graphql_1.Kind.DOCUMENT) {\n      var parsedSchemaDocument = typeof schema === 'string' ? graphql_1.parse(schema) : schema;\n      parsedSchemaDocument.definitions.forEach(function (def) {\n        var type = typeFromAST_1.default(def);\n        if (type instanceof graphql_1.GraphQLDirective && mergeDirectives) {\n          directives.push(type);\n        } else if (type && !(type instanceof graphql_1.GraphQLDirective)) {\n          addTypeCandidate(typeCandidates, type.name, {\n            type: type\n          });\n        }\n      });\n      var extensionsDocument = makeExecutableSchema_1.extractExtensionDefinitions(parsedSchemaDocument);\n      if (extensionsDocument.definitions.length > 0) {\n        extensions.push(extensionsDocument);\n      }\n    } else if (Array.isArray(schema)) {\n      schema.forEach(function (type) {\n        addTypeCandidate(typeCandidates, type.name, {\n          type: type\n        });\n      });\n    } else {\n      throw new Error(\"Invalid schema passed\");\n    }\n  });\n  var mergeInfo = createMergeInfo(allSchemas, fragments);\n  if (!resolvers) {\n    resolvers = {};\n  } else if (typeof resolvers === 'function') {\n    console.warn('Passing functions as resolver parameter is deprecated. Use `info.mergeInfo` instead.');\n    resolvers = resolvers(mergeInfo);\n  } else if (Array.isArray(resolvers)) {\n    resolvers = resolvers.reduce(function (left, right) {\n      if (typeof right === 'function') {\n        console.warn('Passing functions as resolver parameter is deprecated. Use `info.mergeInfo` instead.');\n        right = right(mergeInfo);\n      }\n      return mergeDeep_1.default(left, right);\n    }, {});\n  }\n  var generatedResolvers = {};\n  Object.keys(typeCandidates).forEach(function (typeName) {\n    var resultType = defaultVisitType(typeName, typeCandidates[typeName]);\n    if (resultType === null) {\n      types[typeName] = null;\n    } else {\n      var type = void 0;\n      var typeResolvers = void 0;\n      if (graphql_1.isNamedType(resultType)) {\n        type = resultType;\n      } else if (resultType.type) {\n        type = resultType.type;\n        typeResolvers = resultType.resolvers;\n      } else {\n        throw new Error(\"Invalid visitType result for type \" + typeName);\n      }\n      types[typeName] = schemaRecreation_1.recreateType(type, resolveType, false);\n      if (typeResolvers) {\n        generatedResolvers[typeName] = typeResolvers;\n      }\n    }\n  });\n  var mergedSchema = new graphql_1.GraphQLSchema({\n    query: types.Query,\n    mutation: types.Mutation,\n    subscription: types.Subscription,\n    types: Object.keys(types).map(function (key) {\n      return types[key];\n    }),\n    directives: directives.map(function (directive) {\n      return schemaRecreation_1.recreateDirective(directive, resolveType);\n    })\n  });\n  extensions.forEach(function (extension) {\n    mergedSchema = graphql_1.extendSchema(mergedSchema, extension, {\n      commentDescriptions: true\n    });\n  });\n  if (!resolvers) {\n    resolvers = {};\n  } else if (Array.isArray(resolvers)) {\n    resolvers = resolvers.reduce(mergeDeep_1.default, {});\n  }\n  Object.keys(resolvers).forEach(function (typeName) {\n    var type = resolvers[typeName];\n    if (type instanceof graphql_1.GraphQLScalarType) {\n      return;\n    }\n    Object.keys(type).forEach(function (fieldName) {\n      var field = type[fieldName];\n      if (field.fragment) {\n        fragments.push({\n          field: fieldName,\n          fragment: field.fragment\n        });\n      }\n    });\n  });\n  mergedSchema = makeExecutableSchema_1.addResolveFunctionsToSchema({\n    schema: mergedSchema,\n    resolvers: mergeDeep_1.default(generatedResolvers, resolvers),\n    inheritResolversFromInterfaces: inheritResolversFromInterfaces\n  });\n  forEachField(mergedSchema, function (field) {\n    if (field.resolve) {\n      var fieldResolver_1 = field.resolve;\n      field.resolve = function (parent, args, context, info) {\n        var newInfo = __assign(__assign({}, info), {\n          mergeInfo: mergeInfo\n        });\n        return fieldResolver_1(parent, args, context, newInfo);\n      };\n    }\n    if (field.subscribe) {\n      var fieldResolver_2 = field.subscribe;\n      field.subscribe = function (parent, args, context, info) {\n        var newInfo = __assign(__assign({}, info), {\n          mergeInfo: mergeInfo\n        });\n        return fieldResolver_2(parent, args, context, newInfo);\n      };\n    }\n  });\n  if (schemaDirectives) {\n    schemaVisitor_1.SchemaDirectiveVisitor.visitSchemaDirectives(mergedSchema, schemaDirectives);\n  }\n  return mergedSchema;\n}\nfunction createMergeInfo(allSchemas, fragments) {\n  return {\n    delegate: function (operation, fieldName, args, context, info, transforms) {\n      console.warn('`mergeInfo.delegate` is deprecated. ' + 'Use `mergeInfo.delegateToSchema and pass explicit schema instances.');\n      var schema = guessSchemaByRootField(allSchemas, operation, fieldName);\n      var expandTransforms = new transforms_1.ExpandAbstractTypes(info.schema, schema);\n      var fragmentTransform = new transforms_1.ReplaceFieldWithFragment(schema, fragments);\n      return delegateToSchema_1.default({\n        schema: schema,\n        operation: operation,\n        fieldName: fieldName,\n        args: args,\n        context: context,\n        info: info,\n        transforms: __spreadArrays(transforms || [], [expandTransforms, fragmentTransform])\n      });\n    },\n    delegateToSchema: function (options) {\n      return delegateToSchema_1.default(__assign(__assign({}, options), {\n        transforms: options.transforms\n      }));\n    },\n    fragments: fragments\n  };\n}\nfunction guessSchemaByRootField(schemas, operation, fieldName) {\n  for (var _i = 0, schemas_1 = schemas; _i < schemas_1.length; _i++) {\n    var schema = schemas_1[_i];\n    var rootObject = void 0;\n    if (operation === 'subscription') {\n      rootObject = schema.getSubscriptionType();\n    } else if (operation === 'mutation') {\n      rootObject = schema.getMutationType();\n    } else {\n      rootObject = schema.getQueryType();\n    }\n    if (rootObject) {\n      var fields = rootObject.getFields();\n      if (fields[fieldName]) {\n        return schema;\n      }\n    }\n  }\n  throw new Error(\"Could not find subschema with field `\" + operation + \".\" + fieldName + \"`\");\n}\nfunction createDelegatingResolver(schema, operation, fieldName) {\n  return function (root, args, context, info) {\n    return info.mergeInfo.delegateToSchema({\n      schema: schema,\n      operation: operation,\n      fieldName: fieldName,\n      args: args,\n      context: context,\n      info: info\n    });\n  };\n}\nfunction forEachField(schema, fn) {\n  var typeMap = schema.getTypeMap();\n  Object.keys(typeMap).forEach(function (typeName) {\n    var type = typeMap[typeName];\n    if (!graphql_1.getNamedType(type).name.startsWith('__') && type instanceof graphql_1.GraphQLObjectType) {\n      var fields_1 = type.getFields();\n      Object.keys(fields_1).forEach(function (fieldName) {\n        var field = fields_1[fieldName];\n        fn(field, typeName, fieldName);\n      });\n    }\n  });\n}\nfunction addTypeCandidate(typeCandidates, name, typeCandidate) {\n  if (!typeCandidates[name]) {\n    typeCandidates[name] = [];\n  }\n  typeCandidates[name].push(typeCandidate);\n}\nfunction defaultVisitType(name, candidates, candidateSelector) {\n  if (!candidateSelector) {\n    candidateSelector = function (cands) {\n      return cands[cands.length - 1];\n    };\n  }\n  var resolveType = schemaRecreation_1.createResolveType(function (_, type) {\n    return type;\n  });\n  if (name === 'Query' || name === 'Mutation' || name === 'Subscription') {\n    var fields_2 = {};\n    var operationName_1;\n    switch (name) {\n      case 'Query':\n        operationName_1 = 'query';\n        break;\n      case 'Mutation':\n        operationName_1 = 'mutation';\n        break;\n      case 'Subscription':\n        operationName_1 = 'subscription';\n        break;\n      default:\n        break;\n    }\n    var resolvers_1 = {};\n    var resolverKey_1 = operationName_1 === 'subscription' ? 'subscribe' : 'resolve';\n    candidates.forEach(function (_a) {\n      var candidateType = _a.type,\n        schema = _a.schema;\n      var candidateFields = candidateType.getFields();\n      fields_2 = __assign(__assign({}, fields_2), candidateFields);\n      Object.keys(candidateFields).forEach(function (fieldName) {\n        var _a;\n        resolvers_1[fieldName] = (_a = {}, _a[resolverKey_1] = createDelegatingResolver(schema, operationName_1, fieldName), _a);\n      });\n    });\n    var type = new graphql_1.GraphQLObjectType({\n      name: name,\n      fields: schemaRecreation_1.fieldMapToFieldConfigMap(fields_2, resolveType, false)\n    });\n    return {\n      type: type,\n      resolvers: resolvers_1\n    };\n  } else {\n    var candidate = candidateSelector(candidates);\n    return candidate.type;\n  }\n}","map":{"version":3,"names":["graphql_1","require","makeExecutableSchema_1","schemaRecreation_1","delegateToSchema_1","typeFromAST_1","transforms_1","mergeDeep_1","schemaVisitor_1","mergeSchemas","_a","schemas","onTypeConflict","resolvers","schemaDirectives","inheritResolversFromInterfaces","mergeDirectives","mergeSchemasImplementation","exports","default","allSchemas","typeCandidates","types","extensions","directives","fragments","resolveType","createResolveType","name","undefined","Error","forEach","schema","GraphQLSchema","push","queryType_1","getQueryType","mutationType_1","getMutationType","subscriptionType_1","getSubscriptionType","addTypeCandidate","type","directiveInstances","getDirectives","directive","typeMap_1","getTypeMap","Object","keys","typeName","isNamedType","getNamedType","slice","kind","Kind","DOCUMENT","parsedSchemaDocument","parse","definitions","def","GraphQLDirective","extensionsDocument","extractExtensionDefinitions","length","Array","isArray","mergeInfo","createMergeInfo","console","warn","reduce","left","right","generatedResolvers","resultType","defaultVisitType","typeResolvers","recreateType","mergedSchema","query","Query","mutation","Mutation","subscription","Subscription","map","key","recreateDirective","extension","extendSchema","commentDescriptions","GraphQLScalarType","fieldName","field","fragment","addResolveFunctionsToSchema","forEachField","resolve","fieldResolver_1","parent","args","context","info","newInfo","__assign","subscribe","fieldResolver_2","SchemaDirectiveVisitor","visitSchemaDirectives","delegate","operation","transforms","guessSchemaByRootField","expandTransforms","ExpandAbstractTypes","fragmentTransform","ReplaceFieldWithFragment","__spreadArrays","delegateToSchema","options","_i","schemas_1","rootObject","fields","getFields","createDelegatingResolver","root","fn","typeMap","startsWith","GraphQLObjectType","fields_1","typeCandidate","candidates","candidateSelector","cands","_","fields_2","operationName_1","resolvers_1","resolverKey_1","candidateType","candidateFields","fieldMapToFieldConfigMap","candidate"],"sources":["../../src/stitching/mergeSchemas.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}