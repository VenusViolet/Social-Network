{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar graphql_1 = require(\"graphql\");\nvar _1 = require(\".\");\nvar filterExtensionDefinitions_1 = require(\"./filterExtensionDefinitions\");\nfunction buildSchemaFromTypeDefinitions(typeDefinitions, parseOptions) {\n  // TODO: accept only array here, otherwise interfaces get confusing.\n  var myDefinitions = typeDefinitions;\n  var astDocument;\n  if (isDocumentNode(typeDefinitions)) {\n    astDocument = typeDefinitions;\n  } else if (typeof myDefinitions !== 'string') {\n    if (!Array.isArray(myDefinitions)) {\n      var type = typeof myDefinitions;\n      throw new _1.SchemaError(\"typeDefs must be a string, array or schema AST, got \" + type);\n    }\n    myDefinitions = _1.concatenateTypeDefs(myDefinitions);\n  }\n  if (typeof myDefinitions === 'string') {\n    astDocument = graphql_1.parse(myDefinitions, parseOptions);\n  }\n  var backcompatOptions = {\n    commentDescriptions: true\n  };\n  var typesAst = filterExtensionDefinitions_1.default(astDocument);\n  // TODO fix types https://github.com/apollographql/graphql-tools/issues/542\n  var schema = graphql_1.buildASTSchema(typesAst, backcompatOptions);\n  var extensionsAst = _1.extractExtensionDefinitions(astDocument);\n  if (extensionsAst.definitions.length > 0) {\n    // TODO fix types https://github.com/apollographql/graphql-tools/issues/542\n    schema = graphql_1.extendSchema(schema, extensionsAst, backcompatOptions);\n  }\n  return schema;\n}\nfunction isDocumentNode(typeDefinitions) {\n  return typeDefinitions.kind !== undefined;\n}\nexports.default = buildSchemaFromTypeDefinitions;","map":{"version":3,"names":["graphql_1","require","_1","filterExtensionDefinitions_1","buildSchemaFromTypeDefinitions","typeDefinitions","parseOptions","myDefinitions","astDocument","isDocumentNode","Array","isArray","type","SchemaError","concatenateTypeDefs","parse","backcompatOptions","commentDescriptions","typesAst","default","schema","buildASTSchema","extensionsAst","extractExtensionDefinitions","definitions","length","extendSchema","kind","undefined","exports"],"sources":["../../src/generate/buildSchemaFromTypeDefinitions.ts"],"sourcesContent":[null],"mappings":";;;AAAA,IAAAA,SAAA,GAAAC,OAAA;AASA,IAAAC,EAAA,GAAAD,OAAA;AAKA,IAAAE,4BAAA,GAAAF,OAAA;AAEA,SAASG,8BAA8BA,CACrCC,eAAiC,EACjCC,YAAkC;EAElC;EACA,IAAIC,aAAa,GAAGF,eAAe;EACnC,IAAIG,WAAyB;EAE7B,IAAIC,cAAc,CAACJ,eAAe,CAAC,EAAE;IACnCG,WAAW,GAAGH,eAAe;GAC9B,MAAM,IAAI,OAAOE,aAAa,KAAK,QAAQ,EAAE;IAC5C,IAAI,CAACG,KAAK,CAACC,OAAO,CAACJ,aAAa,CAAC,EAAE;MACjC,IAAMK,IAAI,GAAG,OAAOL,aAAa;MACjC,MAAM,IAAIL,EAAA,CAAAW,WAAW,CACnB,yDAAuDD,IAAM,CAC9D;;IAEHL,aAAa,GAAGL,EAAA,CAAAY,mBAAmB,CAACP,aAAa,CAAC;;EAGpD,IAAI,OAAOA,aAAa,KAAK,QAAQ,EAAE;IACrCC,WAAW,GAAGR,SAAA,CAAAe,KAAK,CAACR,aAAa,EAAED,YAAY,CAAC;;EAGlD,IAAMU,iBAAiB,GAAG;IAAEC,mBAAmB,EAAE;EAAI,CAAE;EACvD,IAAMC,QAAQ,GAAGf,4BAAA,CAAAgB,OAA0B,CAACX,WAAW,CAAC;EAExD;EACA,IAAIY,MAAM,GAAmBpB,SAAA,CAAAqB,cAAsB,CACjDH,QAAQ,EACRF,iBAAiB,CAClB;EAED,IAAMM,aAAa,GAAGpB,EAAA,CAAAqB,2BAA2B,CAACf,WAAW,CAAC;EAC9D,IAAIc,aAAa,CAACE,WAAW,CAACC,MAAM,GAAG,CAAC,EAAE;IACxC;IACAL,MAAM,GAAIpB,SAAA,CAAA0B,YAAoB,CAACN,MAAM,EAAEE,aAAa,EAAEN,iBAAiB,CAAC;;EAG1E,OAAOI,MAAM;AACf;AAEA,SAASX,cAAcA,CACrBJ,eAAiC;EAEjC,OAAsBA,eAAgB,CAACsB,IAAI,KAAKC,SAAS;AAC3D;AAEAC,OAAA,CAAAV,OAAA,GAAef,8BAA8B"},"metadata":{},"sourceType":"script","externalDependencies":[]}