{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar graphql_1 = require(\"graphql\");\nvar _1 = require(\".\");\nfunction assertResolveFunctionsPresent(schema, resolverValidationOptions) {\n  if (resolverValidationOptions === void 0) {\n    resolverValidationOptions = {};\n  }\n  var _a = resolverValidationOptions.requireResolversForArgs,\n    requireResolversForArgs = _a === void 0 ? false : _a,\n    _b = resolverValidationOptions.requireResolversForNonScalar,\n    requireResolversForNonScalar = _b === void 0 ? false : _b,\n    _c = resolverValidationOptions.requireResolversForAllFields,\n    requireResolversForAllFields = _c === void 0 ? false : _c;\n  if (requireResolversForAllFields && (requireResolversForArgs || requireResolversForNonScalar)) {\n    throw new TypeError('requireResolversForAllFields takes precedence over the more specific assertions. ' + 'Please configure either requireResolversForAllFields or requireResolversForArgs / ' + 'requireResolversForNonScalar, but not a combination of them.');\n  }\n  _1.forEachField(schema, function (field, typeName, fieldName) {\n    // requires a resolve function for *every* field.\n    if (requireResolversForAllFields) {\n      expectResolveFunction(field, typeName, fieldName);\n    }\n    // requires a resolve function on every field that has arguments\n    if (requireResolversForArgs && field.args.length > 0) {\n      expectResolveFunction(field, typeName, fieldName);\n    }\n    // requires a resolve function on every field that returns a non-scalar type\n    if (requireResolversForNonScalar && !(graphql_1.getNamedType(field.type) instanceof graphql_1.GraphQLScalarType)) {\n      expectResolveFunction(field, typeName, fieldName);\n    }\n  });\n}\nfunction expectResolveFunction(field, typeName, fieldName) {\n  if (!field.resolve) {\n    console.warn(\n    // tslint:disable-next-line: max-line-length\n    \"Resolve function missing for \\\"\" + typeName + \".\" + fieldName + \"\\\". To disable this warning check https://github.com/apollostack/graphql-tools/issues/131\");\n    return;\n  }\n  if (typeof field.resolve !== 'function') {\n    throw new _1.SchemaError(\"Resolver \\\"\" + typeName + \".\" + fieldName + \"\\\" must be a function\");\n  }\n}\nexports.default = assertResolveFunctionsPresent;","map":{"version":3,"names":["graphql_1","require","_1","assertResolveFunctionsPresent","schema","resolverValidationOptions","_a","requireResolversForArgs","_b","requireResolversForNonScalar","_c","requireResolversForAllFields","TypeError","forEachField","field","typeName","fieldName","expectResolveFunction","args","length","getNamedType","type","GraphQLScalarType","resolve","console","warn","SchemaError","exports","default"],"sources":["../../src/generate/assertResolveFunctionsPresent.ts"],"sourcesContent":[null],"mappings":";;;AAAA,IAAAA,SAAA,GAAAC,OAAA;AAQA,IAAAC,EAAA,GAAAD,OAAA;AAEA,SAASE,6BAA6BA,CACpCC,MAAqB,EACrBC,yBAA0D;EAA1D,IAAAA,yBAAA;IAAAA,yBAAA,KAA0D;EAAA;EAGxD,IAAAC,EAAA,GAAAD,yBAAA,CAAAE,uBAA+B;IAA/BA,uBAAA,GAAAD,EAAA,sBAAAA,EAA+B;IAC/BE,EAAA,GAAAH,yBAAA,CAAAI,4BAAoC;IAApCA,4BAAA,GAAAD,EAAA,sBAAAA,EAAoC;IACpCE,EAAA,GAAAL,yBAAA,CAAAM,4BAAoC;IAApCA,4BAAA,GAAAD,EAAA,sBAAAA,EAAoC;EAGtC,IACEC,4BAA4B,KAC3BJ,uBAAuB,IAAIE,4BAA4B,CAAC,EACzD;IACA,MAAM,IAAIG,SAAS,CACjB,mFAAmF,GACjF,oFAAoF,GACpF,8DAA8D,CACjE;;EAGHV,EAAA,CAAAW,YAAY,CAACT,MAAM,EAAE,UAACU,KAAK,EAAEC,QAAQ,EAAEC,SAAS;IAC9C;IACA,IAAIL,4BAA4B,EAAE;MAChCM,qBAAqB,CAACH,KAAK,EAAEC,QAAQ,EAAEC,SAAS,CAAC;;IAGnD;IACA,IAAIT,uBAAuB,IAAIO,KAAK,CAACI,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;MACpDF,qBAAqB,CAACH,KAAK,EAAEC,QAAQ,EAAEC,SAAS,CAAC;;IAGnD;IACA,IACEP,4BAA4B,IAC5B,EAAET,SAAA,CAAAoB,YAAY,CAACN,KAAK,CAACO,IAAI,CAAC,YAAYrB,SAAA,CAAAsB,iBAAiB,CAAC,EACxD;MACAL,qBAAqB,CAACH,KAAK,EAAEC,QAAQ,EAAEC,SAAS,CAAC;;EAErD,CAAC,CAAC;AACJ;AAEA,SAASC,qBAAqBA,CAC5BH,KAA6B,EAC7BC,QAAgB,EAChBC,SAAiB;EAEjB,IAAI,CAACF,KAAK,CAACS,OAAO,EAAE;IAClBC,OAAO,CAACC,IAAI;IACV;IACA,oCAAiCV,QAAQ,SAAIC,SAAS,8FAA0F,CACjJ;IACD;;EAEF,IAAI,OAAOF,KAAK,CAACS,OAAO,KAAK,UAAU,EAAE;IACvC,MAAM,IAAIrB,EAAA,CAAAwB,WAAW,CACnB,gBAAaX,QAAQ,SAAIC,SAAS,0BAAsB,CACzD;;AAEL;AAEAW,OAAA,CAAAC,OAAA,GAAezB,6BAA6B"},"metadata":{},"sourceType":"script","externalDependencies":[]}