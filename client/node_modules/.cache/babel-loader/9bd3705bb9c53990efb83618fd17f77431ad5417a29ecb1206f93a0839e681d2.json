{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.legacyOptionsToPluginOptions = exports.ApolloServerPluginUsageReportingFromLegacyOptions = void 0;\nconst graphql_1 = require(\"graphql\");\nconst plugin_1 = require(\"./plugin\");\nfunction ApolloServerPluginUsageReportingFromLegacyOptions() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.create(null);\n  return plugin_1.ApolloServerPluginUsageReporting(legacyOptionsToPluginOptions(options));\n}\nexports.ApolloServerPluginUsageReportingFromLegacyOptions = ApolloServerPluginUsageReportingFromLegacyOptions;\nfunction legacyOptionsToPluginOptions(engine) {\n  var _a;\n  const pluginOptions = {};\n  pluginOptions.calculateSignature = engine.calculateSignature;\n  pluginOptions.reportIntervalMs = engine.reportIntervalMs;\n  pluginOptions.maxUncompressedReportSize = engine.maxUncompressedReportSize;\n  pluginOptions.endpointUrl = (_a = engine.tracesEndpointUrl) !== null && _a !== void 0 ? _a : engine.endpointUrl;\n  pluginOptions.debugPrintReports = engine.debugPrintReports;\n  pluginOptions.requestAgent = engine.requestAgent;\n  pluginOptions.maxAttempts = engine.maxAttempts;\n  pluginOptions.minimumRetryDelayMs = engine.minimumRetryDelayMs;\n  pluginOptions.reportErrorFunction = engine.reportErrorFunction;\n  pluginOptions.sendVariableValues = engine.sendVariableValues;\n  if (typeof engine.reportTiming === 'function') {\n    pluginOptions.includeRequest = engine.reportTiming;\n  }\n  pluginOptions.sendHeaders = engine.sendHeaders;\n  pluginOptions.sendReportsImmediately = engine.sendReportsImmediately;\n  if (engine.maskErrorDetails && engine.rewriteError) {\n    throw new Error(\"Can't set both maskErrorDetails and rewriteError!\");\n  } else if (engine.rewriteError && typeof engine.rewriteError !== 'function') {\n    throw new Error('rewriteError must be a function');\n  } else if (engine.maskErrorDetails) {\n    pluginOptions.rewriteError = () => new graphql_1.GraphQLError('<masked>');\n    delete engine.maskErrorDetails;\n  } else if (engine.rewriteError) {\n    pluginOptions.rewriteError = engine.rewriteError;\n  }\n  pluginOptions.generateClientInfo = engine.generateClientInfo;\n  pluginOptions.logger = engine.logger;\n  if (typeof engine.privateVariables !== 'undefined' && engine.sendVariableValues) {\n    throw new Error(\"You have set both the 'sendVariableValues' and the deprecated 'privateVariables' options. \" + \"Please only set 'sendVariableValues' (ideally, when calling `ApolloServerPluginUsageReporting` \" + 'instead of the deprecated `engine` option to the `ApolloServer` constructor).');\n  } else if (typeof engine.privateVariables !== 'undefined') {\n    if (engine.privateVariables !== null) {\n      pluginOptions.sendVariableValues = makeSendValuesBaseOptionsFromLegacy(engine.privateVariables);\n    }\n  } else {\n    pluginOptions.sendVariableValues = engine.sendVariableValues;\n  }\n  if (typeof engine.privateHeaders !== 'undefined' && engine.sendHeaders) {\n    throw new Error(\"You have set both the 'sendHeaders' and the deprecated 'privateVariables' options. \" + \"Please only set 'sendHeaders' (ideally, when calling `ApolloServerPluginUsageReporting` \" + 'instead of the deprecated `engine` option to the `ApolloServer` constructor).');\n  } else if (typeof engine.privateHeaders !== 'undefined') {\n    if (engine.privateHeaders !== null) {\n      pluginOptions.sendHeaders = makeSendValuesBaseOptionsFromLegacy(engine.privateHeaders);\n    }\n  } else {\n    pluginOptions.sendHeaders = engine.sendHeaders;\n  }\n  return pluginOptions;\n}\nexports.legacyOptionsToPluginOptions = legacyOptionsToPluginOptions;\nfunction makeSendValuesBaseOptionsFromLegacy(legacyPrivateOption) {\n  return Array.isArray(legacyPrivateOption) ? {\n    exceptNames: legacyPrivateOption\n  } : legacyPrivateOption ? {\n    none: true\n  } : {\n    all: true\n  };\n}","map":{"version":3,"names":["graphql_1","require","plugin_1","ApolloServerPluginUsageReportingFromLegacyOptions","options","arguments","length","undefined","Object","create","ApolloServerPluginUsageReporting","legacyOptionsToPluginOptions","exports","engine","pluginOptions","calculateSignature","reportIntervalMs","maxUncompressedReportSize","endpointUrl","_a","tracesEndpointUrl","debugPrintReports","requestAgent","maxAttempts","minimumRetryDelayMs","reportErrorFunction","sendVariableValues","reportTiming","includeRequest","sendHeaders","sendReportsImmediately","maskErrorDetails","rewriteError","Error","GraphQLError","generateClientInfo","logger","privateVariables","makeSendValuesBaseOptionsFromLegacy","privateHeaders","legacyPrivateOption","Array","isArray","exceptNames","none","all"],"sources":["/Users/venusrodin/node_modules/apollo-server-core/src/plugin/usageReporting/legacyOptions.ts"],"sourcesContent":["import { DocumentNode, GraphQLError } from 'graphql';\nimport { RequestAgent } from 'apollo-server-env';\nimport {\n  Logger,\n  GraphQLRequestContextDidResolveOperation,\n  GraphQLRequestContextDidEncounterErrors,\n} from 'apollo-server-types';\nimport {\n  ApolloServerPluginUsageReportingOptions,\n  VariableValueOptions,\n  SendValuesBaseOptions,\n  GenerateClientInfo,\n} from './options';\nimport { ApolloServerPlugin } from 'apollo-server-plugin-base';\nimport { ApolloServerPluginUsageReporting } from './plugin';\n\n/**\n * The type of the legacy `engine` option to `new ApolloServer`. Replaced by the\n * `apollo` argument and the options to various plugin functions. In most cases\n * these options map directly to fields on `ApolloConfigInput`,\n * `ApolloServerPluginUsageReportingOptions`, or\n * `ApolloServerPluginSchemaReportingOptions`; the correspondance is documented\n * in the migration guide at\n * https://go.apollo.dev/s/migration-engine-plugins\n */\nexport interface EngineReportingOptions<TContext> {\n  apiKey?: string;\n  calculateSignature?: (ast: DocumentNode, operationName: string) => string;\n  reportIntervalMs?: number;\n  maxUncompressedReportSize?: number;\n  endpointUrl?: string;\n  tracesEndpointUrl?: string;\n  debugPrintReports?: boolean;\n  requestAgent?: RequestAgent | false;\n  maxAttempts?: number;\n  minimumRetryDelayMs?: number;\n  reportErrorFunction?: (err: Error) => void;\n  sendVariableValues?: VariableValueOptions;\n  reportTiming?: ReportTimingOptions<TContext>;\n  privateVariables?: Array<String> | boolean;\n  sendHeaders?: SendValuesBaseOptions;\n  privateHeaders?: Array<String> | boolean;\n  handleSignals?: boolean;\n  sendReportsImmediately?: boolean;\n  maskErrorDetails?: boolean;\n  rewriteError?: (err: GraphQLError) => GraphQLError | null;\n  schemaTag?: string;\n  graphVariant?: string;\n  generateClientInfo?: GenerateClientInfo<TContext>;\n  reportSchema?: boolean;\n  overrideReportedSchema?: string;\n  schemaReportingInitialDelayMaxMs?: number;\n  schemaReportingUrl?: string;\n  logger?: Logger;\n  experimental_schemaReporting?: boolean;\n  experimental_overrideReportedSchema?: string;\n  experimental_schemaReportingInitialDelayMaxMs?: number;\n}\n\nexport type ReportTimingOptions<TContext> =\n  | ((\n      request:\n        | GraphQLRequestContextDidResolveOperation<TContext>\n        | GraphQLRequestContextDidEncounterErrors<TContext>,\n    ) => Promise<boolean>)\n  | boolean;\n\nexport function ApolloServerPluginUsageReportingFromLegacyOptions<TContext>(\n  options: EngineReportingOptions<TContext> = Object.create(null),\n): ApolloServerPlugin {\n  return ApolloServerPluginUsageReporting(\n    legacyOptionsToPluginOptions(options),\n  );\n}\n\n/**\n * Converts the usage-reporting-related options in EngineReportingOptions format\n * (the deprecated `engine` option to `new ApolloServer`) into the appropriate\n * format for this plugin.\n */\nexport function legacyOptionsToPluginOptions(\n  engine: EngineReportingOptions<any>,\n): ApolloServerPluginUsageReportingOptions<any> {\n  const pluginOptions: ApolloServerPluginUsageReportingOptions<any> = {};\n  // apiKey, schemaTag, graphVariant, and handleSignals are dealt with\n  // elsewhere.\n\n  pluginOptions.calculateSignature = engine.calculateSignature;\n  pluginOptions.reportIntervalMs = engine.reportIntervalMs;\n  pluginOptions.maxUncompressedReportSize = engine.maxUncompressedReportSize;\n  pluginOptions.endpointUrl = engine.tracesEndpointUrl ?? engine.endpointUrl;\n  pluginOptions.debugPrintReports = engine.debugPrintReports;\n  pluginOptions.requestAgent = engine.requestAgent;\n  pluginOptions.maxAttempts = engine.maxAttempts;\n  pluginOptions.minimumRetryDelayMs = engine.minimumRetryDelayMs;\n  pluginOptions.reportErrorFunction = engine.reportErrorFunction;\n  pluginOptions.sendVariableValues = engine.sendVariableValues;\n  if (typeof engine.reportTiming === 'function') {\n    // We can ignore true because that just means to make the plugin, and\n    // false is already taken care of with disabledViaLegacyOption.\n    pluginOptions.includeRequest = engine.reportTiming;\n  }\n  pluginOptions.sendHeaders = engine.sendHeaders;\n  pluginOptions.sendReportsImmediately = engine.sendReportsImmediately;\n\n  // Normalize the legacy option maskErrorDetails.\n  if (engine.maskErrorDetails && engine.rewriteError) {\n    throw new Error(\"Can't set both maskErrorDetails and rewriteError!\");\n  } else if (engine.rewriteError && typeof engine.rewriteError !== 'function') {\n    throw new Error('rewriteError must be a function');\n  } else if (engine.maskErrorDetails) {\n    pluginOptions.rewriteError = () => new GraphQLError('<masked>');\n    delete engine.maskErrorDetails;\n  } else if (engine.rewriteError) {\n    pluginOptions.rewriteError = engine.rewriteError;\n  }\n  pluginOptions.generateClientInfo = engine.generateClientInfo;\n  pluginOptions.logger = engine.logger;\n\n  // Handle the legacy option: privateVariables\n  if (\n    typeof engine.privateVariables !== 'undefined' &&\n    engine.sendVariableValues\n  ) {\n    throw new Error(\n      \"You have set both the 'sendVariableValues' and the deprecated 'privateVariables' options. \" +\n        \"Please only set 'sendVariableValues' (ideally, when calling `ApolloServerPluginUsageReporting` \" +\n        'instead of the deprecated `engine` option to the `ApolloServer` constructor).',\n    );\n  } else if (typeof engine.privateVariables !== 'undefined') {\n    if (engine.privateVariables !== null) {\n      pluginOptions.sendVariableValues = makeSendValuesBaseOptionsFromLegacy(\n        engine.privateVariables,\n      );\n    }\n  } else {\n    pluginOptions.sendVariableValues = engine.sendVariableValues;\n  }\n\n  // Handle the legacy option: privateHeaders\n  if (typeof engine.privateHeaders !== 'undefined' && engine.sendHeaders) {\n    throw new Error(\n      \"You have set both the 'sendHeaders' and the deprecated 'privateVariables' options. \" +\n        \"Please only set 'sendHeaders' (ideally, when calling `ApolloServerPluginUsageReporting` \" +\n        'instead of the deprecated `engine` option to the `ApolloServer` constructor).',\n    );\n  } else if (typeof engine.privateHeaders !== 'undefined') {\n    if (engine.privateHeaders !== null) {\n      pluginOptions.sendHeaders = makeSendValuesBaseOptionsFromLegacy(\n        engine.privateHeaders,\n      );\n    }\n  } else {\n    pluginOptions.sendHeaders = engine.sendHeaders;\n  }\n  return pluginOptions;\n}\n\n// This helper wraps non-null inputs from the deprecated options\n// 'privateVariables' and 'privateHeaders' into objects that can be passed to\n// the replacement options, 'sendVariableValues' and 'sendHeaders'.\nfunction makeSendValuesBaseOptionsFromLegacy(\n  legacyPrivateOption: Array<String> | boolean,\n): SendValuesBaseOptions {\n  return Array.isArray(legacyPrivateOption)\n    ? {\n        exceptNames: legacyPrivateOption,\n      }\n    : legacyPrivateOption\n    ? { none: true }\n    : { all: true };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}