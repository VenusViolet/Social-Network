{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.printWithReducedWhitespace = exports.removeAliases = exports.sortAST = exports.dropUnusedDefinitions = exports.hideStringAndNumericLiterals = exports.hideLiterals = void 0;\nconst visitor_1 = require(\"graphql/language/visitor\");\nconst printer_1 = require(\"graphql/language/printer\");\nconst utilities_1 = require(\"graphql/utilities\");\nconst lodash_sortby_1 = __importDefault(require(\"lodash.sortby\"));\nfunction hideLiterals(ast) {\n  return (0, visitor_1.visit)(ast, {\n    IntValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: \"0\"\n      });\n    },\n    FloatValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: \"0\"\n      });\n    },\n    StringValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: \"\",\n        block: false\n      });\n    },\n    ListValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        values: []\n      });\n    },\n    ObjectValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        fields: []\n      });\n    }\n  });\n}\nexports.hideLiterals = hideLiterals;\nfunction hideStringAndNumericLiterals(ast) {\n  return (0, visitor_1.visit)(ast, {\n    IntValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: \"0\"\n      });\n    },\n    FloatValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: \"0\"\n      });\n    },\n    StringValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: \"\",\n        block: false\n      });\n    }\n  });\n}\nexports.hideStringAndNumericLiterals = hideStringAndNumericLiterals;\nfunction dropUnusedDefinitions(ast, operationName) {\n  const separated = (0, utilities_1.separateOperations)(ast)[operationName];\n  if (!separated) {\n    return ast;\n  }\n  return separated;\n}\nexports.dropUnusedDefinitions = dropUnusedDefinitions;\nfunction sorted(items) {\n  if (items) {\n    for (var _len = arguments.length, iteratees = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      iteratees[_key - 1] = arguments[_key];\n    }\n    return (0, lodash_sortby_1.default)(items, ...iteratees);\n  }\n  return undefined;\n}\nfunction sortAST(ast) {\n  return (0, visitor_1.visit)(ast, {\n    Document(node) {\n      return Object.assign(Object.assign({}, node), {\n        definitions: (0, lodash_sortby_1.default)(node.definitions, \"kind\", \"name.value\")\n      });\n    },\n    OperationDefinition(node) {\n      return Object.assign(Object.assign({}, node), {\n        variableDefinitions: sorted(node.variableDefinitions, \"variable.name.value\")\n      });\n    },\n    SelectionSet(node) {\n      return Object.assign(Object.assign({}, node), {\n        selections: (0, lodash_sortby_1.default)(node.selections, \"kind\", \"name.value\")\n      });\n    },\n    Field(node) {\n      return Object.assign(Object.assign({}, node), {\n        arguments: sorted(node.arguments, \"name.value\")\n      });\n    },\n    FragmentSpread(node) {\n      return Object.assign(Object.assign({}, node), {\n        directives: sorted(node.directives, \"name.value\")\n      });\n    },\n    InlineFragment(node) {\n      return Object.assign(Object.assign({}, node), {\n        directives: sorted(node.directives, \"name.value\")\n      });\n    },\n    FragmentDefinition(node) {\n      return Object.assign(Object.assign({}, node), {\n        directives: sorted(node.directives, \"name.value\"),\n        variableDefinitions: sorted(node.variableDefinitions, \"variable.name.value\")\n      });\n    },\n    Directive(node) {\n      return Object.assign(Object.assign({}, node), {\n        arguments: sorted(node.arguments, \"name.value\")\n      });\n    }\n  });\n}\nexports.sortAST = sortAST;\nfunction removeAliases(ast) {\n  return (0, visitor_1.visit)(ast, {\n    Field(node) {\n      return Object.assign(Object.assign({}, node), {\n        alias: undefined\n      });\n    }\n  });\n}\nexports.removeAliases = removeAliases;\nfunction printWithReducedWhitespace(ast) {\n  const sanitizedAST = (0, visitor_1.visit)(ast, {\n    StringValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: Buffer.from(node.value, \"utf8\").toString(\"hex\"),\n        block: false\n      });\n    }\n  });\n  const withWhitespace = (0, printer_1.print)(sanitizedAST);\n  const minimizedButStillHex = withWhitespace.replace(/\\s+/g, \" \").replace(/([^_a-zA-Z0-9]) /g, (_, c) => c).replace(/ ([^_a-zA-Z0-9])/g, (_, c) => c);\n  return minimizedButStillHex.replace(/\"([a-f0-9]+)\"/g, (_, hex) => JSON.stringify(Buffer.from(hex, \"hex\").toString(\"utf8\")));\n}\nexports.printWithReducedWhitespace = printWithReducedWhitespace;","map":{"version":3,"names":["visitor_1","require","printer_1","utilities_1","lodash_sortby_1","__importDefault","hideLiterals","ast","visit","IntValue","node","Object","assign","value","FloatValue","StringValue","block","ListValue","values","ObjectValue","fields","exports","hideStringAndNumericLiterals","dropUnusedDefinitions","operationName","separated","separateOperations","sorted","items","_len","arguments","length","iteratees","Array","_key","default","undefined","sortAST","Document","definitions","OperationDefinition","variableDefinitions","SelectionSet","selections","Field","FragmentSpread","directives","InlineFragment","FragmentDefinition","Directive","removeAliases","alias","printWithReducedWhitespace","sanitizedAST","Buffer","from","toString","withWhitespace","print","minimizedButStillHex","replace","_","c","hex","JSON","stringify"],"sources":["/Users/venusrodin/node_modules/apollo-graphql/src/transforms.ts"],"sourcesContent":["import { visit } from \"graphql/language/visitor\";\nimport {\n  DocumentNode,\n  FloatValueNode,\n  IntValueNode,\n  StringValueNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  FragmentSpreadNode,\n  InlineFragmentNode,\n  DirectiveNode,\n  FieldNode,\n  FragmentDefinitionNode,\n  ObjectValueNode,\n  ListValueNode,\n} from \"graphql/language/ast\";\nimport { print } from \"graphql/language/printer\";\nimport { separateOperations } from \"graphql/utilities\";\n// We'll only fetch the `ListIteratee` type from the `@types/lodash`, but get\n// `sortBy` from the modularized version of the package to avoid bringing in\n// all of `lodash`.\nimport { ListIteratee } from \"lodash\";\nimport sortBy from \"lodash.sortby\";\n\n// Replace numeric, string, list, and object literals with \"empty\"\n// values. Leaves enums alone (since there's no consistent \"zero\" enum). This\n// can help combine similar queries if you substitute values directly into\n// queries rather than use GraphQL variables, and can hide sensitive data in\n// your query (say, a hardcoded API key) from Apollo's servers, but in general\n// avoiding those situations is better than working around them.\nexport function hideLiterals(ast: DocumentNode): DocumentNode {\n  return visit(ast, {\n    IntValue(node: IntValueNode): IntValueNode {\n      return { ...node, value: \"0\" };\n    },\n    FloatValue(node: FloatValueNode): FloatValueNode {\n      return { ...node, value: \"0\" };\n    },\n    StringValue(node: StringValueNode): StringValueNode {\n      return { ...node, value: \"\", block: false };\n    },\n    ListValue(node: ListValueNode): ListValueNode {\n      return { ...node, values: [] };\n    },\n    ObjectValue(node: ObjectValueNode): ObjectValueNode {\n      return { ...node, fields: [] };\n    },\n  });\n}\n\n// In the same spirit as the similarly named `hideLiterals` function, only\n// hide string and numeric literals.\nexport function hideStringAndNumericLiterals(ast: DocumentNode): DocumentNode {\n  return visit(ast, {\n    IntValue(node: IntValueNode): IntValueNode {\n      return { ...node, value: \"0\" };\n    },\n    FloatValue(node: FloatValueNode): FloatValueNode {\n      return { ...node, value: \"0\" };\n    },\n    StringValue(node: StringValueNode): StringValueNode {\n      return { ...node, value: \"\", block: false };\n    },\n  });\n}\n\n// A GraphQL query may contain multiple named operations, with the operation to\n// use specified separately by the client. This transformation drops unused\n// operations from the query, as well as any fragment definitions that are not\n// referenced.  (In general we recommend that unused definitions are dropped on\n// the client before sending to the server to save bandwidth and parsing time.)\nexport function dropUnusedDefinitions(\n  ast: DocumentNode,\n  operationName: string\n): DocumentNode {\n  const separated = separateOperations(ast)[operationName];\n  if (!separated) {\n    // If the given operationName isn't found, just make this whole transform a\n    // no-op instead of crashing.\n    return ast;\n  }\n  return separated;\n}\n\n// Like lodash's sortBy, but sorted(undefined) === undefined rather than []. It\n// is a stable non-in-place sort.\nfunction sorted<T>(\n  items: ReadonlyArray<T> | undefined,\n  ...iteratees: Array<ListIteratee<T>>\n): Array<T> | undefined {\n  if (items) {\n    return sortBy(items, ...iteratees);\n  }\n  return undefined;\n}\n\n// sortAST sorts most multi-child nodes alphabetically. Using this as part of\n// your signature calculation function may make it easier to tell the difference\n// between queries that are similar to each other, and if for some reason your\n// GraphQL client generates query strings with elements in nondeterministic\n// order, it can make sure the queries are treated as identical.\nexport function sortAST(ast: DocumentNode): DocumentNode {\n  return visit(ast, {\n    Document(node: DocumentNode) {\n      return {\n        ...node,\n        // Use sortBy because 'definitions' is not optional.\n        // The sort on \"kind\" places fragments before operations within the document\n        definitions: sortBy(node.definitions, \"kind\", \"name.value\"),\n      };\n    },\n    OperationDefinition(\n      node: OperationDefinitionNode\n    ): OperationDefinitionNode {\n      return {\n        ...node,\n        variableDefinitions: sorted(\n          node.variableDefinitions,\n          \"variable.name.value\"\n        ),\n      };\n    },\n    SelectionSet(node: SelectionSetNode): SelectionSetNode {\n      return {\n        ...node,\n        // Define an ordering for field names in a SelectionSet.  Field first,\n        // then FragmentSpread, then InlineFragment.  By a lovely coincidence,\n        // the order we want them to appear in is alphabetical by node.kind.\n        // Use sortBy instead of sorted because 'selections' is not optional.\n        selections: sortBy(node.selections, \"kind\", \"name.value\"),\n      };\n    },\n    Field(node: FieldNode): FieldNode {\n      return {\n        ...node,\n        arguments: sorted(node.arguments, \"name.value\"),\n      };\n    },\n    FragmentSpread(node: FragmentSpreadNode): FragmentSpreadNode {\n      return { ...node, directives: sorted(node.directives, \"name.value\") };\n    },\n    InlineFragment(node: InlineFragmentNode): InlineFragmentNode {\n      return { ...node, directives: sorted(node.directives, \"name.value\") };\n    },\n    FragmentDefinition(node: FragmentDefinitionNode): FragmentDefinitionNode {\n      return {\n        ...node,\n        directives: sorted(node.directives, \"name.value\"),\n        variableDefinitions: sorted(\n          node.variableDefinitions,\n          \"variable.name.value\"\n        ),\n      };\n    },\n    Directive(node: DirectiveNode): DirectiveNode {\n      return { ...node, arguments: sorted(node.arguments, \"name.value\") };\n    },\n  });\n}\n\n// removeAliases gets rid of GraphQL aliases, a feature by which you can tell a\n// server to return a field's data under a different name from the field\n// name. Maybe this is useful if somebody somewhere inserts random aliases into\n// their queries.\nexport function removeAliases(ast: DocumentNode): DocumentNode {\n  return visit(ast, {\n    Field(node: FieldNode): FieldNode {\n      return {\n        ...node,\n        alias: undefined,\n      };\n    },\n  });\n}\n\n// Like the graphql-js print function, but deleting whitespace wherever\n// feasible. Specifically, all whitespace (outside of string literals) is\n// reduced to at most one space, and even that space is removed anywhere except\n// for between two alphanumerics.\nexport function printWithReducedWhitespace(ast: DocumentNode): string {\n  // In a GraphQL AST (which notably does not contain comments), the only place\n  // where meaningful whitespace (or double quotes) can exist is in\n  // StringNodes. So to print with reduced whitespace, we:\n  // - temporarily sanitize strings by replacing their contents with hex\n  // - use the default GraphQL printer\n  // - minimize the whitespace with a simple regexp replacement\n  // - convert strings back to their actual value\n  // We normalize all strings to non-block strings for simplicity.\n\n  const sanitizedAST = visit(ast, {\n    StringValue(node: StringValueNode): StringValueNode {\n      return {\n        ...node,\n        value: Buffer.from(node.value, \"utf8\").toString(\"hex\"),\n        block: false,\n      };\n    },\n  });\n  const withWhitespace = print(sanitizedAST);\n  const minimizedButStillHex = withWhitespace\n    .replace(/\\s+/g, \" \")\n    .replace(/([^_a-zA-Z0-9]) /g, (_, c) => c)\n    .replace(/ ([^_a-zA-Z0-9])/g, (_, c) => c);\n  return minimizedButStillHex.replace(/\"([a-f0-9]+)\"/g, (_, hex) =>\n    JSON.stringify(Buffer.from(hex, \"hex\").toString(\"utf8\"))\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}