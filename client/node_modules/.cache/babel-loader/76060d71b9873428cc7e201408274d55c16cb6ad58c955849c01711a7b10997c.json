{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar graphql_1 = require(\"graphql\");\nvar uuid = require(\"uuid\");\nvar makeExecutableSchema_1 = require(\"./makeExecutableSchema\");\n// This function wraps addMockFunctionsToSchema for more convenience\nfunction mockServer(schema, mocks, preserveResolvers) {\n  if (preserveResolvers === void 0) {\n    preserveResolvers = false;\n  }\n  var mySchema;\n  if (!(schema instanceof graphql_1.GraphQLSchema)) {\n    // TODO: provide useful error messages here if this fails\n    mySchema = makeExecutableSchema_1.buildSchemaFromTypeDefinitions(schema);\n  } else {\n    mySchema = schema;\n  }\n  addMockFunctionsToSchema({\n    schema: mySchema,\n    mocks: mocks,\n    preserveResolvers: preserveResolvers\n  });\n  return {\n    query: function (query, vars) {\n      return graphql_1.graphql(mySchema, query, {}, {}, vars);\n    }\n  };\n}\nexports.mockServer = mockServer;\nvar defaultMockMap = new Map();\ndefaultMockMap.set('Int', function () {\n  return Math.round(Math.random() * 200) - 100;\n});\ndefaultMockMap.set('Float', function () {\n  return Math.random() * 200 - 100;\n});\ndefaultMockMap.set('String', function () {\n  return 'Hello World';\n});\ndefaultMockMap.set('Boolean', function () {\n  return Math.random() > 0.5;\n});\ndefaultMockMap.set('ID', function () {\n  return uuid.v4();\n});\n// TODO allow providing a seed such that lengths of list could be deterministic\n// this could be done by using casual to get a random list length if the casual\n// object is global.\nfunction addMockFunctionsToSchema(_a) {\n  var schema = _a.schema,\n    _b = _a.mocks,\n    mocks = _b === void 0 ? {} : _b,\n    _c = _a.preserveResolvers,\n    preserveResolvers = _c === void 0 ? false : _c;\n  if (!schema) {\n    throw new Error('Must provide schema to mock');\n  }\n  if (!(schema instanceof graphql_1.GraphQLSchema)) {\n    throw new Error('Value at \"schema\" must be of type GraphQLSchema');\n  }\n  if (!isObject(mocks)) {\n    throw new Error('mocks must be of type Object');\n  }\n  // use Map internally, because that API is nicer.\n  var mockFunctionMap = new Map();\n  Object.keys(mocks).forEach(function (typeName) {\n    mockFunctionMap.set(typeName, mocks[typeName]);\n  });\n  mockFunctionMap.forEach(function (mockFunction, mockTypeName) {\n    if (typeof mockFunction !== 'function') {\n      throw new Error(\"mockFunctionMap[\" + mockTypeName + \"] must be a function\");\n    }\n  });\n  var mockType = function (type, typeName, fieldName) {\n    // order of precendence for mocking:\n    // 1. if the object passed in already has fieldName, just use that\n    // --> if it's a function, that becomes your resolver\n    // --> if it's a value, the mock resolver will return that\n    // 2. if the nullableType is a list, recurse\n    // 2. if there's a mock defined for this typeName, that will be used\n    // 3. if there's no mock defined, use the default mocks for this type\n    return function (root, args, context, info) {\n      // nullability doesn't matter for the purpose of mocking.\n      var fieldType = graphql_1.getNullableType(type);\n      var namedFieldType = graphql_1.getNamedType(fieldType);\n      if (root && typeof root[fieldName] !== 'undefined') {\n        var result = void 0;\n        // if we're here, the field is already defined\n        if (typeof root[fieldName] === 'function') {\n          result = root[fieldName](root, args, context, info);\n          if (result instanceof MockList) {\n            result = result.mock(root, args, context, info, fieldType, mockType);\n          }\n        } else {\n          result = root[fieldName];\n        }\n        // Now we merge the result with the default mock for this type.\n        // This allows overriding defaults while writing very little code.\n        if (mockFunctionMap.has(namedFieldType.name)) {\n          result = mergeMocks(mockFunctionMap.get(namedFieldType.name).bind(null, root, args, context, info), result);\n        }\n        return result;\n      }\n      if (fieldType instanceof graphql_1.GraphQLList || fieldType instanceof graphql_1.GraphQLNonNull) {\n        return [mockType(fieldType.ofType)(root, args, context, info), mockType(fieldType.ofType)(root, args, context, info)];\n      }\n      if (mockFunctionMap.has(fieldType.name) && !(fieldType instanceof graphql_1.GraphQLUnionType || fieldType instanceof graphql_1.GraphQLInterfaceType)) {\n        // the object passed doesn't have this field, so we apply the default mock\n        return mockFunctionMap.get(fieldType.name)(root, args, context, info);\n      }\n      if (fieldType instanceof graphql_1.GraphQLObjectType) {\n        // objects don't return actual data, we only need to mock scalars!\n        return {};\n      }\n      // if a mock function is provided for unionType or interfaceType, execute it to resolve the concrete type\n      // otherwise randomly pick a type from all implementation types\n      if (fieldType instanceof graphql_1.GraphQLUnionType || fieldType instanceof graphql_1.GraphQLInterfaceType) {\n        var implementationType = void 0;\n        if (mockFunctionMap.has(fieldType.name)) {\n          var interfaceMockObj = mockFunctionMap.get(fieldType.name)(root, args, context, info);\n          if (!interfaceMockObj || !interfaceMockObj.__typename) {\n            return Error(\"Please return a __typename in \\\"\" + fieldType.name + \"\\\"\");\n          }\n          implementationType = schema.getType(interfaceMockObj.__typename);\n        } else {\n          var possibleTypes = schema.getPossibleTypes(fieldType);\n          implementationType = getRandomElement(possibleTypes);\n        }\n        return Object.assign({\n          __typename: implementationType\n        }, mockType(implementationType)(root, args, context, info));\n      }\n      if (fieldType instanceof graphql_1.GraphQLEnumType) {\n        return getRandomElement(fieldType.getValues()).value;\n      }\n      if (defaultMockMap.has(fieldType.name)) {\n        return defaultMockMap.get(fieldType.name)(root, args, context, info);\n      }\n      // if we get to here, we don't have a value, and we don't have a mock for this type,\n      // we could return undefined, but that would be hard to debug, so we throw instead.\n      // however, we returning it instead of throwing it, so preserveResolvers can handle the failures.\n      return Error(\"No mock defined for type \\\"\" + fieldType.name + \"\\\"\");\n    };\n  };\n  makeExecutableSchema_1.forEachField(schema, function (field, typeName, fieldName) {\n    assignResolveType(field.type, preserveResolvers);\n    var mockResolver;\n    // we have to handle the root mutation and root query types differently,\n    // because no resolver is called at the root.\n    /* istanbul ignore next: Must provide schema DefinitionNode with query type or a type named Query. */\n    var isOnQueryType = schema.getQueryType() && schema.getQueryType().name === typeName;\n    var isOnMutationType = schema.getMutationType() && schema.getMutationType().name === typeName;\n    if (isOnQueryType || isOnMutationType) {\n      if (mockFunctionMap.has(typeName)) {\n        var rootMock_1 = mockFunctionMap.get(typeName);\n        // XXX: BUG in here, need to provide proper signature for rootMock.\n        if (typeof rootMock_1(undefined, {}, {}, {})[fieldName] === 'function') {\n          mockResolver = function (root, args, context, info) {\n            var updatedRoot = root || {}; // TODO: should we clone instead?\n            updatedRoot[fieldName] = rootMock_1(root, args, context, info)[fieldName];\n            // XXX this is a bit of a hack to still use mockType, which\n            // lets you mock lists etc. as well\n            // otherwise we could just set field.resolve to rootMock()[fieldName]\n            // it's like pretending there was a resolve function that ran before\n            // the root resolve function.\n            return mockType(field.type, typeName, fieldName)(updatedRoot, args, context, info);\n          };\n        }\n      }\n    }\n    if (!mockResolver) {\n      mockResolver = mockType(field.type, typeName, fieldName);\n    }\n    if (!preserveResolvers || !field.resolve) {\n      field.resolve = mockResolver;\n    } else {\n      var oldResolver_1 = field.resolve;\n      field.resolve = function (rootObject, args, context, info) {\n        return Promise.all([mockResolver(rootObject, args, context, info), oldResolver_1(rootObject, args, context, info)]).then(function (values) {\n          var mockedValue = values[0],\n            resolvedValue = values[1];\n          // In case we couldn't mock\n          if (mockedValue instanceof Error) {\n            // only if value was not resolved, populate the error.\n            if (undefined === resolvedValue) {\n              throw mockedValue;\n            }\n            return resolvedValue;\n          }\n          if (resolvedValue instanceof Date && mockedValue instanceof Date) {\n            return undefined !== resolvedValue ? resolvedValue : mockedValue;\n          }\n          if (isObject(mockedValue) && isObject(resolvedValue)) {\n            // Object.assign() won't do here, as we need to all properties, including\n            // the non-enumerable ones and defined using Object.defineProperty\n            var emptyObject = Object.create(Object.getPrototypeOf(resolvedValue));\n            return copyOwnProps(emptyObject, resolvedValue, mockedValue);\n          }\n          return undefined !== resolvedValue ? resolvedValue : mockedValue;\n        });\n      };\n    }\n  });\n}\nexports.addMockFunctionsToSchema = addMockFunctionsToSchema;\nfunction isObject(thing) {\n  return thing === Object(thing) && !Array.isArray(thing);\n}\n// returns a random element from that ary\nfunction getRandomElement(ary) {\n  var sample = Math.floor(Math.random() * ary.length);\n  return ary[sample];\n}\nfunction mergeObjects(a, b) {\n  return Object.assign(a, b);\n}\nfunction copyOwnPropsIfNotPresent(target, source) {\n  Object.getOwnPropertyNames(source).forEach(function (prop) {\n    if (!Object.getOwnPropertyDescriptor(target, prop)) {\n      Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop));\n    }\n  });\n}\nfunction copyOwnProps(target) {\n  var sources = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    sources[_i - 1] = arguments[_i];\n  }\n  sources.forEach(function (source) {\n    var chain = source;\n    while (chain) {\n      copyOwnPropsIfNotPresent(target, chain);\n      chain = Object.getPrototypeOf(chain);\n    }\n  });\n  return target;\n}\n// takes either an object or a (possibly nested) array\n// and completes the customMock object with any fields\n// defined on genericMock\n// only merges objects or arrays. Scalars are returned as is\nfunction mergeMocks(genericMockFunction, customMock) {\n  if (Array.isArray(customMock)) {\n    return customMock.map(function (el) {\n      return mergeMocks(genericMockFunction, el);\n    });\n  }\n  if (isObject(customMock)) {\n    return mergeObjects(genericMockFunction(), customMock);\n  }\n  return customMock;\n}\nfunction getResolveType(namedFieldType) {\n  if (namedFieldType instanceof graphql_1.GraphQLInterfaceType || namedFieldType instanceof graphql_1.GraphQLUnionType) {\n    return namedFieldType.resolveType;\n  } else {\n    return undefined;\n  }\n}\nfunction assignResolveType(type, preserveResolvers) {\n  var fieldType = graphql_1.getNullableType(type);\n  var namedFieldType = graphql_1.getNamedType(fieldType);\n  var oldResolveType = getResolveType(namedFieldType);\n  if (preserveResolvers && oldResolveType && oldResolveType.length) {\n    return;\n  }\n  if (namedFieldType instanceof graphql_1.GraphQLUnionType || namedFieldType instanceof graphql_1.GraphQLInterfaceType) {\n    // the default `resolveType` always returns null. We add a fallback\n    // resolution that works with how unions and interface are mocked\n    namedFieldType.resolveType = function (data, context, info) {\n      return info.schema.getType(data.__typename);\n    };\n  }\n}\nvar MockList = /** @class */function () {\n  // wrappedFunction can return another MockList or a value\n  function MockList(len, wrappedFunction) {\n    this.len = len;\n    if (typeof wrappedFunction !== 'undefined') {\n      if (typeof wrappedFunction !== 'function') {\n        throw new Error('Second argument to MockList must be a function or undefined');\n      }\n      this.wrappedFunction = wrappedFunction;\n    }\n  }\n  MockList.prototype.mock = function (root, args, context, info, fieldType, mockTypeFunc) {\n    var arr;\n    if (Array.isArray(this.len)) {\n      arr = new Array(this.randint(this.len[0], this.len[1]));\n    } else {\n      arr = new Array(this.len);\n    }\n    for (var i = 0; i < arr.length; i++) {\n      if (typeof this.wrappedFunction === 'function') {\n        var res = this.wrappedFunction(root, args, context, info);\n        if (res instanceof MockList) {\n          var nullableType = graphql_1.getNullableType(fieldType.ofType);\n          arr[i] = res.mock(root, args, context, info, nullableType, mockTypeFunc);\n        } else {\n          arr[i] = res;\n        }\n      } else {\n        arr[i] = mockTypeFunc(fieldType.ofType)(root, args, context, info);\n      }\n    }\n    return arr;\n  };\n  MockList.prototype.randint = function (low, high) {\n    return Math.floor(Math.random() * (high - low + 1) + low);\n  };\n  return MockList;\n}();\nexports.MockList = MockList;","map":{"version":3,"names":["graphql_1","require","uuid","makeExecutableSchema_1","mockServer","schema","mocks","preserveResolvers","mySchema","GraphQLSchema","buildSchemaFromTypeDefinitions","addMockFunctionsToSchema","query","vars","graphql","exports","defaultMockMap","Map","set","Math","round","random","v4","_a","_b","_c","Error","isObject","mockFunctionMap","Object","keys","forEach","typeName","mockFunction","mockTypeName","mockType","type","fieldName","root","args","context","info","fieldType","getNullableType","namedFieldType","getNamedType","result","MockList","mock","has","name","mergeMocks","get","bind","GraphQLList","GraphQLNonNull","ofType","GraphQLUnionType","GraphQLInterfaceType","GraphQLObjectType","implementationType","interfaceMockObj","__typename","getType","possibleTypes","getPossibleTypes","getRandomElement","assign","GraphQLEnumType","getValues","value","forEachField","field","assignResolveType","mockResolver","isOnQueryType","getQueryType","isOnMutationType","getMutationType","rootMock_1","undefined","updatedRoot","resolve","oldResolver_1","rootObject","Promise","all","then","values","mockedValue","resolvedValue","Date","emptyObject","create","getPrototypeOf","copyOwnProps","thing","Array","isArray","ary","sample","floor","length","mergeObjects","a","b","copyOwnPropsIfNotPresent","target","source","getOwnPropertyNames","prop","getOwnPropertyDescriptor","defineProperty","sources","_i","arguments","chain","genericMockFunction","customMock","map","el","getResolveType","resolveType","oldResolveType","data","len","wrappedFunction","prototype","mockTypeFunc","arr","randint","i","res","nullableType","low","high"],"sources":["../src/mock.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}