{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar graphql_1 = require(\"graphql\");\nvar visitSchema_1 = require(\"../transforms/visitSchema\");\n// Transformation used to modifiy `GraphQLEnumType` values in a schema.\nvar ConvertEnumValues = /** @class */function () {\n  function ConvertEnumValues(enumValueMap) {\n    this.enumValueMap = enumValueMap;\n  }\n  // Walk a schema looking for `GraphQLEnumType` types. If found, and\n  // matching types have been identified in `this.enumValueMap`, create new\n  // `GraphQLEnumType` types using the `this.enumValueMap` specified new\n  // values, and return them in the new schema.\n  ConvertEnumValues.prototype.transformSchema = function (schema) {\n    var _a;\n    var enumValueMap = this.enumValueMap;\n    if (!enumValueMap || Object.keys(enumValueMap).length === 0) {\n      return schema;\n    }\n    var transformedSchema = visitSchema_1.visitSchema(schema, (_a = {}, _a[visitSchema_1.VisitSchemaKind.ENUM_TYPE] = function (enumType) {\n      var externalToInternalValueMap = enumValueMap[enumType.name];\n      if (externalToInternalValueMap) {\n        var values = enumType.getValues();\n        var newValues_1 = {};\n        values.forEach(function (value) {\n          var newValue = Object.keys(externalToInternalValueMap).includes(value.name) ? externalToInternalValueMap[value.name] : value.name;\n          newValues_1[value.name] = {\n            value: newValue,\n            deprecationReason: value.deprecationReason,\n            description: value.description,\n            astNode: value.astNode\n          };\n        });\n        return new graphql_1.GraphQLEnumType({\n          name: enumType.name,\n          description: enumType.description,\n          astNode: enumType.astNode,\n          values: newValues_1\n        });\n      }\n      return enumType;\n    }, _a));\n    return transformedSchema;\n  };\n  return ConvertEnumValues;\n}();\nexports.default = ConvertEnumValues;","map":{"version":3,"names":["graphql_1","require","visitSchema_1","ConvertEnumValues","enumValueMap","prototype","transformSchema","schema","Object","keys","length","transformedSchema","visitSchema","_a","VisitSchemaKind","ENUM_TYPE","enumType","externalToInternalValueMap","name","values","getValues","newValues_1","forEach","value","newValue","includes","deprecationReason","description","astNode","GraphQLEnumType"],"sources":["../../src/transforms/ConvertEnumValues.ts"],"sourcesContent":[null],"mappings":";;;AAAA,IAAAA,SAAA,GAAAC,OAAA;AAEA,IAAAC,aAAA,GAAAD,OAAA;AAEA;AACA,IAAAE,iBAAA;EAKE,SAAAA,kBAAYC,YAAoB;IAC9B,IAAI,CAACA,YAAY,GAAGA,YAAY;EAClC;EAEA;EACA;EACA;EACA;EACOD,iBAAA,CAAAE,SAAA,CAAAC,eAAe,GAAtB,UAAuBC,MAAqB;;IAClC,IAAAH,YAAA,QAAAA,YAAY;IACpB,IAAI,CAACA,YAAY,IAAII,MAAM,CAACC,IAAI,CAACL,YAAY,CAAC,CAACM,MAAM,KAAK,CAAC,EAAE;MAC3D,OAAOH,MAAM;;IAGf,IAAMI,iBAAiB,GAAGT,aAAA,CAAAU,WAAW,CAACL,MAAM,GAAAM,EAAA,OAC1CA,EAAA,CAACX,aAAA,CAAAY,eAAe,CAACC,SAAS,IAA1B,UAA4BC,QAAyB;MACnD,IAAMC,0BAA0B,GAAGb,YAAY,CAACY,QAAQ,CAACE,IAAI,CAAC;MAE9D,IAAID,0BAA0B,EAAE;QAC9B,IAAME,MAAM,GAAGH,QAAQ,CAACI,SAAS,EAAE;QACnC,IAAMC,WAAS,GAAG,EAAE;QACpBF,MAAM,CAACG,OAAO,CAAC,UAAAC,KAAK;UAClB,IAAMC,QAAQ,GAAGhB,MAAM,CAACC,IAAI,CAACQ,0BAA0B,CAAC,CAACQ,QAAQ,CAC/DF,KAAK,CAACL,IAAI,CACX,GACGD,0BAA0B,CAACM,KAAK,CAACL,IAAI,CAAC,GACtCK,KAAK,CAACL,IAAI;UACdG,WAAS,CAACE,KAAK,CAACL,IAAI,CAAC,GAAG;YACtBK,KAAK,EAAEC,QAAQ;YACfE,iBAAiB,EAAEH,KAAK,CAACG,iBAAiB;YAC1CC,WAAW,EAAEJ,KAAK,CAACI,WAAW;YAC9BC,OAAO,EAAEL,KAAK,CAACK;WAChB;QACH,CAAC,CAAC;QAEF,OAAO,IAAI5B,SAAA,CAAA6B,eAAe,CAAC;UACzBX,IAAI,EAAEF,QAAQ,CAACE,IAAI;UACnBS,WAAW,EAAEX,QAAQ,CAACW,WAAW;UACjCC,OAAO,EAAEZ,QAAQ,CAACY,OAAO;UACzBT,MAAM,EAAEE;SACT,CAAC;;MAGJ,OAAOL,QAAQ;IACjB,CAAC,E,IACD;IAEF,OAAOL,iBAAiB;EAC1B,CAAC;EACH,OAAAR,iBAAC;AAAD,CAAC,EAtDD"},"metadata":{},"sourceType":"script","externalDependencies":[]}