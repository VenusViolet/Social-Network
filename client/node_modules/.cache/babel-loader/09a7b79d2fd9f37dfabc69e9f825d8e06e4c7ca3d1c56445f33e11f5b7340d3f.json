{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.computeCoreSchemaHash = exports.ApolloServerPluginSchemaReporting = void 0;\nconst os_1 = __importDefault(require(\"os\"));\nconst uuid_1 = require(\"uuid\");\nconst graphql_1 = require(\"graphql\");\nconst schemaReporter_1 = require(\"./schemaReporter\");\nconst createSHA_1 = __importDefault(require(\"../../utils/createSHA\"));\nconst schemaIsFederated_1 = require(\"../schemaIsFederated\");\nfunction ApolloServerPluginSchemaReporting() {\n  let {\n    initialDelayMaxMs,\n    overrideReportedSchema,\n    endpointUrl,\n    fetcher\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.create(null);\n  const bootId = uuid_1.v4();\n  return {\n    __internal_plugin_id__() {\n      return 'SchemaReporting';\n    },\n    serverWillStart(_ref) {\n      let {\n        apollo,\n        schema,\n        logger\n      } = _ref;\n      return __awaiter(this, void 0, void 0, function* () {\n        const {\n          key,\n          graphRef\n        } = apollo;\n        if (!key) {\n          throw Error('To use ApolloServerPluginSchemaReporting, you must provide an Apollo API ' + 'key, via the APOLLO_KEY environment variable or via `new ApolloServer({apollo: {key})`');\n        }\n        if (!graphRef) {\n          throw Error('To use ApolloServerPluginSchemaReporting, you must provide your graph ref (eg, ' + \"'my-graph-id@my-graph-variant'). Try setting the APOLLO_GRAPH_REF environment \" + 'variable or passing `new ApolloServer({apollo: {graphRef}})`.');\n        }\n        if (overrideReportedSchema) {\n          try {\n            const validationErrors = graphql_1.validateSchema(graphql_1.buildSchema(overrideReportedSchema, {\n              noLocation: true\n            }));\n            if (validationErrors.length) {\n              throw new Error(validationErrors.map(error => error.message).join('\\n'));\n            }\n          } catch (err) {\n            throw new Error('The schema provided to overrideReportedSchema failed to parse or ' + `validate: ${err.message}`);\n          }\n        }\n        if (schemaIsFederated_1.schemaIsFederated(schema)) {\n          throw Error(['Schema reporting is not yet compatible with federated services.', \"If you're interested in using schema reporting with federated\", 'services, please contact Apollo support. To set up managed federation, see', 'https://go.apollo.dev/s/managed-federation'].join(' '));\n        }\n        const coreSchema = overrideReportedSchema !== null && overrideReportedSchema !== void 0 ? overrideReportedSchema : graphql_1.printSchema(schema);\n        const coreSchemaHash = computeCoreSchemaHash(coreSchema);\n        if (overrideReportedSchema !== undefined) {\n          logger.info('Apollo schema reporting: schema to report has been overridden');\n        }\n        if (endpointUrl !== undefined) {\n          logger.info(`Apollo schema reporting: schema reporting URL override: ${endpointUrl}`);\n        }\n        const schemaReport = {\n          bootId,\n          graphRef,\n          platform: process.env.APOLLO_SERVER_PLATFORM || 'local',\n          runtimeVersion: `node ${process.version}`,\n          coreSchemaHash,\n          userVersion: process.env.APOLLO_SERVER_USER_VERSION,\n          serverId: process.env.APOLLO_SERVER_ID || process.env.HOSTNAME || os_1.default.hostname(),\n          libraryVersion: `apollo-server-core@${require('../../../package.json').version}`\n        };\n        logger.info('Apollo schema reporting starting! See your graph at ' + `https://studio.apollographql.com/graph/${encodeURI(graphRef)}/ with server info ${JSON.stringify(schemaReport)}`);\n        const schemaReporter = new schemaReporter_1.SchemaReporter({\n          schemaReport,\n          coreSchema,\n          apiKey: key,\n          endpointUrl,\n          logger,\n          initialReportingDelayInMs: Math.floor(Math.random() * (initialDelayMaxMs !== null && initialDelayMaxMs !== void 0 ? initialDelayMaxMs : 10000)),\n          fallbackReportingDelayInMs: 20000,\n          fetcher\n        });\n        schemaReporter.start();\n        return {\n          serverWillStop() {\n            return __awaiter(this, void 0, void 0, function* () {\n              schemaReporter.stop();\n            });\n          }\n        };\n      });\n    }\n  };\n}\nexports.ApolloServerPluginSchemaReporting = ApolloServerPluginSchemaReporting;\nfunction computeCoreSchemaHash(schema) {\n  return createSHA_1.default('sha256').update(schema).digest('hex');\n}\nexports.computeCoreSchemaHash = computeCoreSchemaHash;","map":{"version":3,"names":["os_1","__importDefault","require","uuid_1","graphql_1","schemaReporter_1","createSHA_1","schemaIsFederated_1","ApolloServerPluginSchemaReporting","initialDelayMaxMs","overrideReportedSchema","endpointUrl","fetcher","arguments","length","undefined","Object","create","bootId","v4","__internal_plugin_id__","serverWillStart","_ref","apollo","schema","logger","key","graphRef","Error","validationErrors","validateSchema","buildSchema","noLocation","map","error","message","join","err","schemaIsFederated","coreSchema","printSchema","coreSchemaHash","computeCoreSchemaHash","info","schemaReport","platform","process","env","APOLLO_SERVER_PLATFORM","runtimeVersion","version","userVersion","APOLLO_SERVER_USER_VERSION","serverId","APOLLO_SERVER_ID","HOSTNAME","default","hostname","libraryVersion","encodeURI","JSON","stringify","schemaReporter","SchemaReporter","apiKey","initialReportingDelayInMs","Math","floor","random","fallbackReportingDelayInMs","start","serverWillStop","stop","exports","update","digest"],"sources":["/Users/venusrodin/node_modules/apollo-server-core/src/plugin/schemaReporting/index.ts"],"sourcesContent":["import os from 'os';\nimport type { InternalApolloServerPlugin } from '../internalPlugin';\nimport { v4 as uuidv4 } from 'uuid';\nimport { printSchema, validateSchema, buildSchema } from 'graphql';\nimport type { fetch } from 'apollo-server-env';\nimport { SchemaReporter } from './schemaReporter';\nimport createSHA from '../../utils/createSHA';\nimport { schemaIsFederated } from '../schemaIsFederated';\nimport { SchemaReport } from './operations';\n\nexport interface ApolloServerPluginSchemaReportingOptions {\n  /**\n   * The schema reporter waits before starting reporting.\n   * By default, the report waits some random amount of time between 0 and 10 seconds.\n   * A longer interval leads to more staggered starts which means it is less likely\n   * multiple servers will get asked to upload the same schema.\n   *\n   * If this server runs in lambda or in other constrained environments it would be useful\n   * to decrease the schema reporting max wait time to be less than default.\n   *\n   * This number will be the max for the range in ms that the schema reporter will\n   * wait before starting to report.\n   */\n  initialDelayMaxMs?: number;\n  /**\n   * Override the reported schema that is reported to the Apollo registry. This\n   * schema does not go through any normalizations and the string is directly\n   * sent to the Apollo registry. This can be useful for comments or other\n   * ordering and whitespace changes that get stripped when generating a\n   * `GraphQLSchema`.\n   *\n   * **If you pass this option to this plugin, you should explicitly configure\n   * `ApolloServerPluginUsageReporting` and pass the same value to its\n   * `overrideReportedSchema` option.** This ensures that the schema ID\n   * associated with requests reported by the usage reporting plugin matches the\n   * schema ID that this plugin reports. For example:\n   *\n   * ```js\n   * new ApolloServer({\n   *   plugins: [\n   *     ApolloServerPluginSchemaReporting({overrideReportedSchema: schema}),\n   *     ApolloServerPluginUsageReporting({overrideReportedSchema: schema}),\n   *   ],\n   * })\n   * ```\n   */\n  overrideReportedSchema?: string;\n  /**\n   * The URL to use for reporting schemas. Primarily for testing and internal\n   * Apollo use.\n   */\n  endpointUrl?: string;\n  /**\n   * Specifies which Fetch API implementation to use when reporting schemas.\n   */\n  fetcher?: typeof fetch;\n}\n\nexport function ApolloServerPluginSchemaReporting(\n  {\n    initialDelayMaxMs,\n    overrideReportedSchema,\n    endpointUrl,\n    fetcher,\n  }: ApolloServerPluginSchemaReportingOptions = Object.create(null),\n): InternalApolloServerPlugin {\n  const bootId = uuidv4();\n\n  return {\n    __internal_plugin_id__() {\n      return 'SchemaReporting';\n    },\n    async serverWillStart({ apollo, schema, logger }) {\n      const { key, graphRef } = apollo;\n      if (!key) {\n        throw Error(\n          'To use ApolloServerPluginSchemaReporting, you must provide an Apollo API ' +\n            'key, via the APOLLO_KEY environment variable or via `new ApolloServer({apollo: {key})`',\n        );\n      }\n      if (!graphRef) {\n        // This error is a bit imprecise as you can also specify ID and variant separately,\n        // or rely on API-key parsing (before AS3), but this is \"best practices\".\n        throw Error(\n          'To use ApolloServerPluginSchemaReporting, you must provide your graph ref (eg, ' +\n            \"'my-graph-id@my-graph-variant'). Try setting the APOLLO_GRAPH_REF environment \" +\n            'variable or passing `new ApolloServer({apollo: {graphRef}})`.',\n        );\n      }\n\n      // Ensure a provided override schema can be parsed and validated\n      if (overrideReportedSchema) {\n        try {\n          const validationErrors = validateSchema(\n            buildSchema(overrideReportedSchema, { noLocation: true }),\n          );\n          if (validationErrors.length) {\n            throw new Error(\n              validationErrors.map((error) => error.message).join('\\n'),\n            );\n          }\n        } catch (err) {\n          throw new Error(\n            'The schema provided to overrideReportedSchema failed to parse or ' +\n              `validate: ${err.message}`,\n          );\n        }\n      }\n\n      if (schemaIsFederated(schema)) {\n        throw Error(\n          [\n            'Schema reporting is not yet compatible with federated services.',\n            \"If you're interested in using schema reporting with federated\",\n            'services, please contact Apollo support. To set up managed federation, see',\n            'https://go.apollo.dev/s/managed-federation',\n          ].join(' '),\n        );\n      }\n\n      // Note that this is not actually the core schema for supergraphs yet, but\n      // this will be fixed by #5187.\n      const coreSchema = overrideReportedSchema ?? printSchema(schema);\n      const coreSchemaHash = computeCoreSchemaHash(coreSchema);\n\n      if (overrideReportedSchema !== undefined) {\n        logger.info(\n          'Apollo schema reporting: schema to report has been overridden',\n        );\n      }\n      if (endpointUrl !== undefined) {\n        logger.info(\n          `Apollo schema reporting: schema reporting URL override: ${endpointUrl}`,\n        );\n      }\n\n      const schemaReport: SchemaReport = {\n        bootId,\n        graphRef,\n        // The infra environment in which this edge server is running, e.g. localhost, Kubernetes\n        // Length must be <= 256 characters.\n        platform: process.env.APOLLO_SERVER_PLATFORM || 'local',\n        runtimeVersion: `node ${process.version}`,\n        coreSchemaHash,\n        // An identifier used to distinguish the version of the server code such as git or docker sha.\n        // Length must be <= 256 charecters\n        userVersion: process.env.APOLLO_SERVER_USER_VERSION,\n        // \"An identifier for the server instance. Length must be <= 256 characters.\n        serverId:\n          process.env.APOLLO_SERVER_ID || process.env.HOSTNAME || os.hostname(),\n        libraryVersion: `apollo-server-core@${\n          require('../../../package.json').version\n        }`,\n      };\n\n      logger.info(\n        'Apollo schema reporting starting! See your graph at ' +\n          `https://studio.apollographql.com/graph/${encodeURI(\n            graphRef,\n          )}/ with server info ${JSON.stringify(schemaReport)}`,\n      );\n\n      const schemaReporter = new SchemaReporter({\n        schemaReport,\n        coreSchema,\n        apiKey: key,\n        endpointUrl,\n        logger,\n        // Jitter the startup between 0 and 10 seconds\n        initialReportingDelayInMs: Math.floor(\n          Math.random() * (initialDelayMaxMs ?? 10_000),\n        ),\n        fallbackReportingDelayInMs: 20_000,\n        fetcher,\n      });\n\n      schemaReporter.start();\n\n      return {\n        async serverWillStop() {\n          schemaReporter.stop();\n        },\n      };\n    },\n  };\n}\n\nexport function computeCoreSchemaHash(schema: string): string {\n  return createSHA('sha256').update(schema).digest('hex');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}