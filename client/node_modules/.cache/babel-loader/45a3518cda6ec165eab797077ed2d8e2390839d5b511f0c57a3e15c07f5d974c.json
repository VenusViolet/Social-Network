{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.determineApolloConfig = void 0;\nconst createSHA_1 = __importDefault(require(\"./utils/createSHA\"));\nfunction determineApolloConfig(input, engine, logger) {\n  if (input && engine !== undefined) {\n    throw Error('Cannot pass both `apollo` and `engine`');\n  }\n  const apolloConfig = {};\n  const {\n    APOLLO_KEY,\n    APOLLO_GRAPH_REF,\n    APOLLO_GRAPH_ID,\n    APOLLO_GRAPH_VARIANT,\n    ENGINE_API_KEY,\n    ENGINE_SCHEMA_TAG\n  } = process.env;\n  if (input === null || input === void 0 ? void 0 : input.key) {\n    apolloConfig.key = input.key;\n  } else if (typeof engine === 'object' && engine.apiKey) {\n    apolloConfig.key = engine.apiKey;\n  } else if (APOLLO_KEY) {\n    if (ENGINE_API_KEY) {\n      logger.warn('Using `APOLLO_KEY` since `ENGINE_API_KEY` (deprecated) is also set in the environment.');\n    }\n    apolloConfig.key = APOLLO_KEY;\n  } else if (ENGINE_API_KEY) {\n    logger.warn('[deprecated] The `ENGINE_API_KEY` environment variable has been renamed to `APOLLO_KEY`.');\n    apolloConfig.key = ENGINE_API_KEY;\n  }\n  if (apolloConfig.key) {\n    apolloConfig.keyHash = createSHA_1.default('sha512').update(apolloConfig.key).digest('hex');\n  }\n  if (input === null || input === void 0 ? void 0 : input.graphRef) {\n    apolloConfig.graphRef = input.graphRef;\n  } else if (APOLLO_GRAPH_REF) {\n    apolloConfig.graphRef = APOLLO_GRAPH_REF;\n  }\n  if (input === null || input === void 0 ? void 0 : input.graphId) {\n    apolloConfig.graphId = input.graphId;\n  } else if (APOLLO_GRAPH_ID) {\n    apolloConfig.graphId = APOLLO_GRAPH_ID;\n  }\n  if (input === null || input === void 0 ? void 0 : input.graphVariant) {\n    apolloConfig.graphVariant = input.graphVariant;\n  } else if (typeof engine === 'object' && engine.graphVariant) {\n    if (engine.schemaTag) {\n      throw new Error('Cannot set more than one of apollo.graphVariant, ' + 'engine.graphVariant, and engine.schemaTag. Please use apollo.graphVariant.');\n    }\n    apolloConfig.graphVariant = engine.graphVariant;\n  } else if (typeof engine === 'object' && engine.schemaTag) {\n    logger.warn('[deprecated] The `engine.schemaTag` option has been renamed to `apollo.graphVariant` ' + '(or you may set it with the `APOLLO_GRAPH_VARIANT` environment variable).');\n    apolloConfig.graphVariant = engine.schemaTag;\n  } else if (APOLLO_GRAPH_VARIANT) {\n    if (ENGINE_SCHEMA_TAG) {\n      throw new Error('`APOLLO_GRAPH_VARIANT` and `ENGINE_SCHEMA_TAG` (deprecated) environment variables must not both be set.');\n    }\n    apolloConfig.graphVariant = APOLLO_GRAPH_VARIANT;\n  } else if (ENGINE_SCHEMA_TAG) {\n    logger.warn('[deprecated] The `ENGINE_SCHEMA_TAG` environment variable has been renamed to `APOLLO_GRAPH_VARIANT`.');\n    apolloConfig.graphVariant = ENGINE_SCHEMA_TAG;\n  }\n  if (apolloConfig.graphRef) {\n    if (apolloConfig.graphId) {\n      throw new Error('Cannot specify both graph ref and graph ID. Please use ' + '`apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph ID.');\n    }\n    if (apolloConfig.graphVariant) {\n      throw new Error('Cannot specify both graph ref and graph variant. Please use ' + '`apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph ID.');\n    }\n    const at = apolloConfig.graphRef.indexOf('@');\n    if (at === -1) {\n      apolloConfig.graphId = apolloConfig.graphRef;\n      apolloConfig.graphVariant = 'current';\n    } else {\n      apolloConfig.graphId = apolloConfig.graphRef.substring(0, at);\n      apolloConfig.graphVariant = apolloConfig.graphRef.substring(at + 1);\n    }\n  } else {\n    if (!apolloConfig.graphId && apolloConfig.key) {\n      const parts = apolloConfig.key.split(':', 2);\n      if (parts[0] === 'service') {\n        apolloConfig.graphId = parts[1];\n      } else {\n        throw Error('You have specified an API key in `apollo.key` or `APOLLO_KEY`, ' + 'but you have not specified your graph ref or graph ID and the key ' + 'does not start with `service:`. Please specify your graph ref; for ' + 'example, set `APOLLO_GRAPH_REF` to `my-graph-id@my-graph-variant`.');\n      }\n    }\n    if (!apolloConfig.graphVariant) {\n      apolloConfig.graphVariant = 'current';\n    }\n    if (apolloConfig.graphId) {\n      apolloConfig.graphRef = `${apolloConfig.graphId}@${apolloConfig.graphVariant}`;\n    }\n  }\n  return apolloConfig;\n}\nexports.determineApolloConfig = determineApolloConfig;","map":{"version":3,"names":["createSHA_1","__importDefault","require","determineApolloConfig","input","engine","logger","undefined","Error","apolloConfig","APOLLO_KEY","APOLLO_GRAPH_REF","APOLLO_GRAPH_ID","APOLLO_GRAPH_VARIANT","ENGINE_API_KEY","ENGINE_SCHEMA_TAG","process","env","key","apiKey","warn","keyHash","default","update","digest","graphRef","graphId","graphVariant","schemaTag","at","indexOf","substring","parts","split","exports"],"sources":["/Users/venusrodin/node_modules/apollo-server-core/src/determineApolloConfig.ts"],"sourcesContent":["import { ApolloConfig, ApolloConfigInput, Logger } from 'apollo-server-types';\nimport createSHA from './utils/createSHA';\nimport type { EngineReportingOptions } from './plugin';\n\n// This function combines the newer `apollo` constructor argument, the older\n// `engine` constructor argument, and some environment variables to come up\n// with a full ApolloConfig.\n//\n// The caller ensures that only one of the two constructor arguments is actually\n// provided and warns if `engine` was provided, but it is this function's job\n// to warn if old environment variables are used.\nexport function determineApolloConfig(\n  input: ApolloConfigInput | undefined,\n  // For backwards compatibility.\n  // AS3: Drop support for deprecated 'engine'.\n  engine: EngineReportingOptions<any> | boolean | undefined,\n  logger: Logger,\n): ApolloConfig {\n  if (input && engine !== undefined) {\n    // There's a more helpful error in the actual ApolloServer constructor.\n    throw Error('Cannot pass both `apollo` and `engine`');\n  }\n  const apolloConfig: Partial<ApolloConfig> = {};\n\n  const {\n    APOLLO_KEY,\n    APOLLO_GRAPH_REF,\n    APOLLO_GRAPH_ID,\n    APOLLO_GRAPH_VARIANT,\n    // AS3: Drop support for deprecated `ENGINE_API_KEY` and `ENGINE_SCHEMA_TAG`.\n    ENGINE_API_KEY,\n    ENGINE_SCHEMA_TAG,\n  } = process.env;\n\n  // Determine key.\n  if (input?.key) {\n    apolloConfig.key = input.key;\n  } else if (typeof engine === 'object' && engine.apiKey) {\n    apolloConfig.key = engine.apiKey;\n  } else if (APOLLO_KEY) {\n    if (ENGINE_API_KEY) {\n      logger.warn(\n        'Using `APOLLO_KEY` since `ENGINE_API_KEY` (deprecated) is also set in the environment.',\n      );\n    }\n    apolloConfig.key = APOLLO_KEY;\n  } else if (ENGINE_API_KEY) {\n    logger.warn(\n      '[deprecated] The `ENGINE_API_KEY` environment variable has been renamed to `APOLLO_KEY`.',\n    );\n    apolloConfig.key = ENGINE_API_KEY;\n  }\n\n  // Determine key hash.\n  if (apolloConfig.key) {\n    apolloConfig.keyHash = createSHA('sha512')\n      .update(apolloConfig.key)\n      .digest('hex');\n  }\n\n  // Determine graph ref, if provided together.\n  if (input?.graphRef) {\n    apolloConfig.graphRef = input.graphRef;\n  } else if (APOLLO_GRAPH_REF) {\n    apolloConfig.graphRef = APOLLO_GRAPH_REF;\n  }\n\n  // Determine graph id.\n  if (input?.graphId) {\n    apolloConfig.graphId = input.graphId;\n  } else if (APOLLO_GRAPH_ID) {\n    apolloConfig.graphId = APOLLO_GRAPH_ID;\n  }\n\n  // Determine variant.\n  if (input?.graphVariant) {\n    apolloConfig.graphVariant = input.graphVariant;\n  } else if (typeof engine === 'object' && engine.graphVariant) {\n    if (engine.schemaTag) {\n      throw new Error(\n        'Cannot set more than one of apollo.graphVariant, ' +\n          'engine.graphVariant, and engine.schemaTag. Please use apollo.graphVariant.',\n      );\n    }\n    apolloConfig.graphVariant = engine.graphVariant;\n  } else if (typeof engine === 'object' && engine.schemaTag) {\n    logger.warn(\n      '[deprecated] The `engine.schemaTag` option has been renamed to `apollo.graphVariant` ' +\n        '(or you may set it with the `APOLLO_GRAPH_VARIANT` environment variable).',\n    );\n    apolloConfig.graphVariant = engine.schemaTag;\n  } else if (APOLLO_GRAPH_VARIANT) {\n    if (ENGINE_SCHEMA_TAG) {\n      throw new Error(\n        '`APOLLO_GRAPH_VARIANT` and `ENGINE_SCHEMA_TAG` (deprecated) environment variables must not both be set.',\n      );\n    }\n    apolloConfig.graphVariant = APOLLO_GRAPH_VARIANT;\n  } else if (ENGINE_SCHEMA_TAG) {\n    logger.warn(\n      '[deprecated] The `ENGINE_SCHEMA_TAG` environment variable has been renamed to `APOLLO_GRAPH_VARIANT`.',\n    );\n    apolloConfig.graphVariant = ENGINE_SCHEMA_TAG;\n  }\n\n  if (apolloConfig.graphRef) {\n    if (apolloConfig.graphId) {\n      throw new Error(\n        'Cannot specify both graph ref and graph ID. Please use ' +\n          '`apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph ID.',\n      );\n    }\n    if (apolloConfig.graphVariant) {\n      throw new Error(\n        'Cannot specify both graph ref and graph variant. Please use ' +\n          '`apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph ID.',\n      );\n    }\n\n    // You've specified the graph ref, so split into id and variant (defaulting\n    // variant to current).\n    const at = apolloConfig.graphRef.indexOf('@');\n    if (at === -1) {\n      apolloConfig.graphId = apolloConfig.graphRef;\n      apolloConfig.graphVariant = 'current';\n    } else {\n      apolloConfig.graphId = apolloConfig.graphRef.substring(0, at);\n      apolloConfig.graphVariant = apolloConfig.graphRef.substring(at + 1);\n    }\n  } else {\n    // Graph ref not specified. Let's try harder to get ID/variant, then join them.\n    if (!apolloConfig.graphId && apolloConfig.key) {\n      // If the given key is a graph token (starts with 'service:'), then use the\n      // service name written in the key. (We will remove this parser in AS3.)\n      const parts = apolloConfig.key.split(':', 2);\n      if (parts[0] === 'service') {\n        apolloConfig.graphId = parts[1];\n      } else {\n        throw Error(\n          'You have specified an API key in `apollo.key` or `APOLLO_KEY`, ' +\n            'but you have not specified your graph ref or graph ID and the key ' +\n            'does not start with `service:`. Please specify your graph ref; for ' +\n            'example, set `APOLLO_GRAPH_REF` to `my-graph-id@my-graph-variant`.',\n        );\n      }\n    }\n    if (!apolloConfig.graphVariant) {\n      apolloConfig.graphVariant = 'current';\n    }\n\n    if (apolloConfig.graphId) {\n      apolloConfig.graphRef = `${apolloConfig.graphId}@${apolloConfig.graphVariant}`;\n    }\n  }\n\n  return apolloConfig as ApolloConfig; // can remove cast in AS3\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}