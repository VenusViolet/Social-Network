{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar graphql_1 = require(\"graphql\");\nvar ReplaceFieldWithFragment = /** @class */function () {\n  function ReplaceFieldWithFragment(targetSchema, fragments) {\n    this.targetSchema = targetSchema;\n    this.mapping = {};\n    for (var _i = 0, fragments_1 = fragments; _i < fragments_1.length; _i++) {\n      var _a = fragments_1[_i],\n        field = _a.field,\n        fragment = _a.fragment;\n      var parsedFragment = parseFragmentToInlineFragment(fragment);\n      var actualTypeName = parsedFragment.typeCondition.name.value;\n      this.mapping[actualTypeName] = this.mapping[actualTypeName] || {};\n      if (this.mapping[actualTypeName][field]) {\n        this.mapping[actualTypeName][field].push(parsedFragment);\n      } else {\n        this.mapping[actualTypeName][field] = [parsedFragment];\n      }\n    }\n  }\n  ReplaceFieldWithFragment.prototype.transformRequest = function (originalRequest) {\n    var document = replaceFieldsWithFragments(this.targetSchema, originalRequest.document, this.mapping);\n    return __assign(__assign({}, originalRequest), {\n      document: document\n    });\n  };\n  return ReplaceFieldWithFragment;\n}();\nexports.default = ReplaceFieldWithFragment;\nfunction replaceFieldsWithFragments(targetSchema, document, mapping) {\n  var _a;\n  var typeInfo = new graphql_1.TypeInfo(targetSchema);\n  return graphql_1.visit(document, graphql_1.visitWithTypeInfo(typeInfo, (_a = {}, _a[graphql_1.Kind.SELECTION_SET] = function (node) {\n    var parentType = typeInfo.getParentType();\n    if (parentType) {\n      var parentTypeName_1 = parentType.name;\n      var selections_1 = node.selections;\n      if (mapping[parentTypeName_1]) {\n        node.selections.forEach(function (selection) {\n          if (selection.kind === graphql_1.Kind.FIELD) {\n            var name_1 = selection.name.value;\n            var fragments = mapping[parentTypeName_1][name_1];\n            if (fragments && fragments.length > 0) {\n              var fragment = concatInlineFragments(parentTypeName_1, fragments);\n              selections_1 = selections_1.concat(fragment);\n            }\n          }\n        });\n      }\n      if (selections_1 !== node.selections) {\n        return __assign(__assign({}, node), {\n          selections: selections_1\n        });\n      }\n    }\n  }, _a)));\n}\nfunction parseFragmentToInlineFragment(definitions) {\n  if (definitions.trim().startsWith('fragment')) {\n    var document_1 = graphql_1.parse(definitions);\n    for (var _i = 0, _a = document_1.definitions; _i < _a.length; _i++) {\n      var definition = _a[_i];\n      if (definition.kind === graphql_1.Kind.FRAGMENT_DEFINITION) {\n        return {\n          kind: graphql_1.Kind.INLINE_FRAGMENT,\n          typeCondition: definition.typeCondition,\n          selectionSet: definition.selectionSet\n        };\n      }\n    }\n  }\n  var query = graphql_1.parse(\"{\" + definitions + \"}\").definitions[0];\n  for (var _b = 0, _c = query.selectionSet.selections; _b < _c.length; _b++) {\n    var selection = _c[_b];\n    if (selection.kind === graphql_1.Kind.INLINE_FRAGMENT) {\n      return selection;\n    }\n  }\n  throw new Error('Could not parse fragment');\n}\nfunction concatInlineFragments(type, fragments) {\n  var fragmentSelections = fragments.reduce(function (selections, fragment) {\n    return selections.concat(fragment.selectionSet.selections);\n  }, []);\n  var deduplicatedFragmentSelection = deduplicateSelection(fragmentSelections);\n  return {\n    kind: graphql_1.Kind.INLINE_FRAGMENT,\n    typeCondition: {\n      kind: graphql_1.Kind.NAMED_TYPE,\n      name: {\n        kind: graphql_1.Kind.NAME,\n        value: type\n      }\n    },\n    selectionSet: {\n      kind: graphql_1.Kind.SELECTION_SET,\n      selections: deduplicatedFragmentSelection\n    }\n  };\n}\nfunction deduplicateSelection(nodes) {\n  var selectionMap = nodes.reduce(function (map, node) {\n    var _a, _b, _c;\n    switch (node.kind) {\n      case 'Field':\n        {\n          if (node.alias) {\n            if (map.hasOwnProperty(node.alias.value)) {\n              return map;\n            } else {\n              return __assign(__assign({}, map), (_a = {}, _a[node.alias.value] = node, _a));\n            }\n          } else {\n            if (map.hasOwnProperty(node.name.value)) {\n              return map;\n            } else {\n              return __assign(__assign({}, map), (_b = {}, _b[node.name.value] = node, _b));\n            }\n          }\n        }\n      case 'FragmentSpread':\n        {\n          if (map.hasOwnProperty(node.name.value)) {\n            return map;\n          } else {\n            return __assign(__assign({}, map), (_c = {}, _c[node.name.value] = node, _c));\n          }\n        }\n      case 'InlineFragment':\n        {\n          if (map.__fragment) {\n            var fragment = map.__fragment;\n            return __assign(__assign({}, map), {\n              __fragment: concatInlineFragments(fragment.typeCondition.name.value, [fragment, node])\n            });\n          } else {\n            return __assign(__assign({}, map), {\n              __fragment: node\n            });\n          }\n        }\n      default:\n        {\n          return map;\n        }\n    }\n  }, {});\n  var selection = Object.keys(selectionMap).reduce(function (selectionList, node) {\n    return selectionList.concat(selectionMap[node]);\n  }, []);\n  return selection;\n}","map":{"version":3,"names":["graphql_1","require","ReplaceFieldWithFragment","targetSchema","fragments","mapping","_i","fragments_1","length","_a","field","fragment","parsedFragment","parseFragmentToInlineFragment","actualTypeName","typeCondition","name","value","push","prototype","transformRequest","originalRequest","document","replaceFieldsWithFragments","__assign","typeInfo","TypeInfo","visit","visitWithTypeInfo","Kind","SELECTION_SET","node","parentType","getParentType","parentTypeName_1","selections_1","selections","forEach","selection","kind","FIELD","name_1","concatInlineFragments","concat","definitions","trim","startsWith","document_1","parse","definition","FRAGMENT_DEFINITION","INLINE_FRAGMENT","selectionSet","query","_b","_c","Error","type","fragmentSelections","reduce","deduplicatedFragmentSelection","deduplicateSelection","NAMED_TYPE","NAME","nodes","selectionMap","map","alias","hasOwnProperty","__fragment","Object","keys","selectionList"],"sources":["../../src/transforms/ReplaceFieldWithFragment.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}