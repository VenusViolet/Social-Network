{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateSchemaHash = void 0;\nconst language_1 = require(\"graphql/language\");\nconst execution_1 = require(\"graphql/execution\");\nconst utilities_1 = require(\"graphql/utilities\");\nconst fast_json_stable_stringify_1 = __importDefault(require(\"fast-json-stable-stringify\"));\nconst createSHA_1 = __importDefault(require(\"./createSHA\"));\nfunction generateSchemaHash(schema) {\n  const introspectionQuery = utilities_1.getIntrospectionQuery();\n  const documentAST = language_1.parse(introspectionQuery);\n  const result = execution_1.execute(schema, documentAST);\n  if (result && typeof result.then === 'function') {\n    throw new Error(['The introspection query is resolving asynchronously; execution of an introspection query is not expected to return a `Promise`.', '', 'Wrapped type resolvers should maintain the existing execution dynamics of the resolvers they wrap (i.e. async vs sync) or introspection types should be excluded from wrapping by checking them with `graphql/type`s, `isIntrospectionType` predicate function prior to wrapping.'].join('\\n'));\n  }\n  if (!result || !result.data || !result.data.__schema) {\n    throw new Error('Unable to generate server introspection document.');\n  }\n  const introspectionSchema = result.data.__schema;\n  const stringifiedSchema = fast_json_stable_stringify_1.default(introspectionSchema);\n  return createSHA_1.default('sha512').update(stringifiedSchema).digest('hex');\n}\nexports.generateSchemaHash = generateSchemaHash;","map":{"version":3,"names":["language_1","require","execution_1","utilities_1","fast_json_stable_stringify_1","__importDefault","createSHA_1","generateSchemaHash","schema","introspectionQuery","getIntrospectionQuery","documentAST","parse","result","execute","then","Error","join","data","__schema","introspectionSchema","stringifiedSchema","default","update","digest","exports"],"sources":["/Users/venusrodin/node_modules/apollo-server-core/src/utils/schemaHash.ts"],"sourcesContent":["import { parse } from 'graphql/language';\nimport { execute, ExecutionResult } from 'graphql/execution';\nimport { getIntrospectionQuery, IntrospectionSchema } from 'graphql/utilities';\nimport stableStringify from 'fast-json-stable-stringify';\nimport { GraphQLSchema } from 'graphql/type';\nimport createSHA from './createSHA';\nimport { SchemaHash } from \"apollo-server-types\";\n\nexport function generateSchemaHash(schema: GraphQLSchema): SchemaHash {\n  const introspectionQuery = getIntrospectionQuery();\n  const documentAST = parse(introspectionQuery);\n  const result = execute(schema, documentAST) as ExecutionResult;\n\n  // If the execution of an introspection query results in a then-able, it\n  // indicates that one or more of its resolvers is behaving in an asynchronous\n  // manner.  This is not the expected behavior of a introspection query\n  // which does not have any asynchronous resolvers.\n  if (\n    result &&\n    typeof (result as PromiseLike<typeof result>).then === 'function'\n  ) {\n    throw new Error(\n      [\n        'The introspection query is resolving asynchronously; execution of an introspection query is not expected to return a `Promise`.',\n        '',\n        'Wrapped type resolvers should maintain the existing execution dynamics of the resolvers they wrap (i.e. async vs sync) or introspection types should be excluded from wrapping by checking them with `graphql/type`s, `isIntrospectionType` predicate function prior to wrapping.',\n      ].join('\\n'),\n    );\n  }\n\n  if (!result || !result.data || !result.data.__schema) {\n    throw new Error('Unable to generate server introspection document.');\n  }\n\n  const introspectionSchema: IntrospectionSchema = result.data.__schema;\n\n  // It's important that we perform a deterministic stringification here\n  // since, depending on changes in the underlying `graphql-js` execution\n  // layer, varying orders of the properties in the introspection\n  const stringifiedSchema = stableStringify(introspectionSchema);\n\n  return createSHA('sha512')\n    .update(stringifiedSchema)\n    .digest('hex') as SchemaHash;\n}\n"],"mappings":";;;;;;;;;;;AAAA,MAAAA,UAAA,GAAAC,OAAA;AACA,MAAAC,WAAA,GAAAD,OAAA;AACA,MAAAE,WAAA,GAAAF,OAAA;AACA,MAAAG,4BAAA,GAAAC,eAAA,CAAAJ,OAAA;AAEA,MAAAK,WAAA,GAAAD,eAAA,CAAAJ,OAAA;AAGA,SAAgBM,kBAAkBA,CAACC,MAAqB;EACtD,MAAMC,kBAAkB,GAAGN,WAAA,CAAAO,qBAAqB,EAAE;EAClD,MAAMC,WAAW,GAAGX,UAAA,CAAAY,KAAK,CAACH,kBAAkB,CAAC;EAC7C,MAAMI,MAAM,GAAGX,WAAA,CAAAY,OAAO,CAACN,MAAM,EAAEG,WAAW,CAAoB;EAM9D,IACEE,MAAM,IACN,OAAQA,MAAqC,CAACE,IAAI,KAAK,UAAU,EACjE;IACA,MAAM,IAAIC,KAAK,CACb,CACE,iIAAiI,EACjI,EAAE,EACF,mRAAmR,CACpR,CAACC,IAAI,CAAC,IAAI,CAAC,CACb;;EAGH,IAAI,CAACJ,MAAM,IAAI,CAACA,MAAM,CAACK,IAAI,IAAI,CAACL,MAAM,CAACK,IAAI,CAACC,QAAQ,EAAE;IACpD,MAAM,IAAIH,KAAK,CAAC,mDAAmD,CAAC;;EAGtE,MAAMI,mBAAmB,GAAwBP,MAAM,CAACK,IAAI,CAACC,QAAQ;EAKrE,MAAME,iBAAiB,GAAGjB,4BAAA,CAAAkB,OAAe,CAACF,mBAAmB,CAAC;EAE9D,OAAOd,WAAA,CAAAgB,OAAS,CAAC,QAAQ,CAAC,CACvBC,MAAM,CAACF,iBAAiB,CAAC,CACzBG,MAAM,CAAC,KAAK,CAAe;AAChC;AApCAC,OAAA,CAAAlB,kBAAA,GAAAA,kBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}