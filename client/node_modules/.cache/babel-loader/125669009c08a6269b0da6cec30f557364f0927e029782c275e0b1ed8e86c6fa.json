{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar graphql_1 = require(\"graphql\");\nvar AddArgumentsAsVariablesTransform = /** @class */function () {\n  function AddArgumentsAsVariablesTransform(schema, args) {\n    this.schema = schema;\n    this.args = args;\n  }\n  AddArgumentsAsVariablesTransform.prototype.transformRequest = function (originalRequest) {\n    var _a = addVariablesToRootField(this.schema, originalRequest.document, this.args),\n      document = _a.document,\n      newVariables = _a.newVariables;\n    var variables = __assign(__assign({}, originalRequest.variables), newVariables);\n    return {\n      document: document,\n      variables: variables\n    };\n  };\n  return AddArgumentsAsVariablesTransform;\n}();\nexports.default = AddArgumentsAsVariablesTransform;\nfunction addVariablesToRootField(targetSchema, document, args) {\n  var operations = document.definitions.filter(function (def) {\n    return def.kind === graphql_1.Kind.OPERATION_DEFINITION;\n  });\n  var fragments = document.definitions.filter(function (def) {\n    return def.kind === graphql_1.Kind.FRAGMENT_DEFINITION;\n  });\n  var variableNames = {};\n  var newOperations = operations.map(function (operation) {\n    var existingVariables = operation.variableDefinitions.map(function (variableDefinition) {\n      return variableDefinition.variable.name.value;\n    });\n    var variableCounter = 0;\n    var variables = {};\n    var generateVariableName = function (argName) {\n      var varName;\n      do {\n        varName = \"_v\" + variableCounter + \"_\" + argName;\n        variableCounter++;\n      } while (existingVariables.indexOf(varName) !== -1);\n      return varName;\n    };\n    var type;\n    if (operation.operation === 'subscription') {\n      type = targetSchema.getSubscriptionType();\n    } else if (operation.operation === 'mutation') {\n      type = targetSchema.getMutationType();\n    } else {\n      type = targetSchema.getQueryType();\n    }\n    var newSelectionSet = [];\n    operation.selectionSet.selections.forEach(function (selection) {\n      if (selection.kind === graphql_1.Kind.FIELD) {\n        var newArgs_1 = {};\n        selection.arguments.forEach(function (argument) {\n          newArgs_1[argument.name.value] = argument;\n        });\n        var name_1 = selection.name.value;\n        var field = type.getFields()[name_1];\n        field.args.forEach(function (argument) {\n          if (argument.name in args) {\n            var variableName = generateVariableName(argument.name);\n            variableNames[argument.name] = variableName;\n            newArgs_1[argument.name] = {\n              kind: graphql_1.Kind.ARGUMENT,\n              name: {\n                kind: graphql_1.Kind.NAME,\n                value: argument.name\n              },\n              value: {\n                kind: graphql_1.Kind.VARIABLE,\n                name: {\n                  kind: graphql_1.Kind.NAME,\n                  value: variableName\n                }\n              }\n            };\n            existingVariables.push(variableName);\n            variables[variableName] = {\n              kind: graphql_1.Kind.VARIABLE_DEFINITION,\n              variable: {\n                kind: graphql_1.Kind.VARIABLE,\n                name: {\n                  kind: graphql_1.Kind.NAME,\n                  value: variableName\n                }\n              },\n              type: typeToAst(argument.type)\n            };\n          }\n        });\n        newSelectionSet.push(__assign(__assign({}, selection), {\n          arguments: Object.keys(newArgs_1).map(function (argName) {\n            return newArgs_1[argName];\n          })\n        }));\n      } else {\n        newSelectionSet.push(selection);\n      }\n    });\n    return __assign(__assign({}, operation), {\n      variableDefinitions: operation.variableDefinitions.concat(Object.keys(variables).map(function (varName) {\n        return variables[varName];\n      })),\n      selectionSet: {\n        kind: graphql_1.Kind.SELECTION_SET,\n        selections: newSelectionSet\n      }\n    });\n  });\n  var newVariables = {};\n  Object.keys(variableNames).forEach(function (name) {\n    newVariables[variableNames[name]] = args[name];\n  });\n  return {\n    document: __assign(__assign({}, document), {\n      definitions: __spreadArrays(newOperations, fragments)\n    }),\n    newVariables: newVariables\n  };\n}\nfunction typeToAst(type) {\n  if (type instanceof graphql_1.GraphQLNonNull) {\n    var innerType = typeToAst(type.ofType);\n    if (innerType.kind === graphql_1.Kind.LIST_TYPE || innerType.kind === graphql_1.Kind.NAMED_TYPE) {\n      return {\n        kind: graphql_1.Kind.NON_NULL_TYPE,\n        type: innerType\n      };\n    } else {\n      throw new Error('Incorrent inner non-null type');\n    }\n  } else if (type instanceof graphql_1.GraphQLList) {\n    return {\n      kind: graphql_1.Kind.LIST_TYPE,\n      type: typeToAst(type.ofType)\n    };\n  } else {\n    return {\n      kind: graphql_1.Kind.NAMED_TYPE,\n      name: {\n        kind: graphql_1.Kind.NAME,\n        value: type.toString()\n      }\n    };\n  }\n}","map":{"version":3,"names":["graphql_1","require","AddArgumentsAsVariablesTransform","schema","args","prototype","transformRequest","originalRequest","_a","addVariablesToRootField","document","newVariables","variables","__assign","targetSchema","operations","definitions","filter","def","kind","Kind","OPERATION_DEFINITION","fragments","FRAGMENT_DEFINITION","variableNames","newOperations","map","operation","existingVariables","variableDefinitions","variableDefinition","variable","name","value","variableCounter","generateVariableName","argName","varName","indexOf","type","getSubscriptionType","getMutationType","getQueryType","newSelectionSet","selectionSet","selections","forEach","selection","FIELD","newArgs_1","arguments","argument","name_1","field","getFields","variableName","ARGUMENT","NAME","VARIABLE","push","VARIABLE_DEFINITION","typeToAst","Object","keys","concat","SELECTION_SET","__spreadArrays","GraphQLNonNull","innerType","ofType","LIST_TYPE","NAMED_TYPE","NON_NULL_TYPE","Error","GraphQLList","toString"],"sources":["../../src/transforms/AddArgumentsAsVariables.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}