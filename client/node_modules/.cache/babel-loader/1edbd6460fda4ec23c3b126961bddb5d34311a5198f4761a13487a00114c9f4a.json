{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApolloServer = void 0;\nconst express_1 = __importDefault(require(\"express\"));\nconst cors_1 = __importDefault(require(\"cors\"));\nconst body_parser_1 = require(\"body-parser\");\nconst graphql_playground_html_1 = require(\"@apollographql/graphql-playground-html\");\nconst apollo_server_core_1 = require(\"apollo-server-core\");\nconst accepts_1 = __importDefault(require(\"accepts\"));\nconst type_is_1 = __importDefault(require(\"type-is\"));\nconst expressApollo_1 = require(\"./expressApollo\");\nvar apollo_server_core_2 = require(\"apollo-server-core\");\nObject.defineProperty(exports, \"GraphQLExtension\", {\n  enumerable: true,\n  get: function () {\n    return apollo_server_core_2.GraphQLExtension;\n  }\n});\nconst fileUploadMiddleware = (uploadsConfig, server) => (req, res, next) => {\n  if (typeof apollo_server_core_1.processFileUploads === 'function' && type_is_1.default(req, ['multipart/form-data'])) {\n    apollo_server_core_1.processFileUploads(req, res, uploadsConfig).then(body => {\n      req.body = body;\n      next();\n    }).catch(error => {\n      if (error.status && error.expose) res.status(error.status);\n      next(apollo_server_core_1.formatApolloErrors([error], {\n        formatter: server.requestOptions.formatError,\n        debug: server.requestOptions.debug\n      }));\n    });\n  } else {\n    next();\n  }\n};\nclass ApolloServer extends apollo_server_core_1.ApolloServerBase {\n  constructor(config) {\n    super(config);\n  }\n  createGraphQLServerOptions(req, res) {\n    const _super = Object.create(null, {\n      graphQLServerOptions: {\n        get: () => super.graphQLServerOptions\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      return _super.graphQLServerOptions.call(this, {\n        req,\n        res\n      });\n    });\n  }\n  supportsSubscriptions() {\n    return true;\n  }\n  supportsUploads() {\n    return true;\n  }\n  applyMiddleware(_a) {\n    var {\n        app\n      } = _a,\n      rest = __rest(_a, [\"app\"]);\n    app.use(this.getMiddleware(rest));\n  }\n  getMiddleware() {\n    let {\n      path,\n      cors,\n      bodyParserConfig,\n      disableHealthCheck,\n      onHealthCheck\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!path) path = '/graphql';\n    const router = express_1.default.Router();\n    const promiseWillStart = this.willStart();\n    router.use(path, (_req, _res, next) => {\n      promiseWillStart.then(() => next()).catch(next);\n    });\n    if (!disableHealthCheck) {\n      router.use('/.well-known/apollo/server-health', (req, res) => {\n        res.type('application/health+json');\n        if (onHealthCheck) {\n          onHealthCheck(req).then(() => {\n            res.json({\n              status: 'pass'\n            });\n          }).catch(() => {\n            res.status(503).json({\n              status: 'fail'\n            });\n          });\n        } else {\n          res.json({\n            status: 'pass'\n          });\n        }\n      });\n    }\n    let uploadsMiddleware;\n    if (this.uploadsConfig && typeof apollo_server_core_1.processFileUploads === 'function') {\n      uploadsMiddleware = fileUploadMiddleware(this.uploadsConfig, this);\n    }\n    this.graphqlPath = path;\n    if (cors === true) {\n      router.use(path, cors_1.default());\n    } else if (cors !== false) {\n      router.use(path, cors_1.default(cors));\n    }\n    if (bodyParserConfig === true) {\n      router.use(path, body_parser_1.json());\n    } else if (bodyParserConfig !== false) {\n      router.use(path, body_parser_1.json(bodyParserConfig));\n    }\n    if (uploadsMiddleware) {\n      router.use(path, uploadsMiddleware);\n    }\n    router.use(path, (req, res, next) => {\n      if (this.playgroundOptions && req.method === 'GET') {\n        const accept = accepts_1.default(req);\n        const types = accept.types();\n        const prefersHTML = types.find(x => x === 'text/html' || x === 'application/json') === 'text/html';\n        if (prefersHTML) {\n          const playgroundRenderPageOptions = Object.assign({\n            endpoint: req.originalUrl,\n            subscriptionEndpoint: this.subscriptionsPath\n          }, this.playgroundOptions);\n          res.setHeader('Content-Type', 'text/html');\n          const playground = graphql_playground_html_1.renderPlaygroundPage(playgroundRenderPageOptions);\n          res.write(playground);\n          res.end();\n          return;\n        }\n      }\n      return expressApollo_1.graphqlExpress(() => this.createGraphQLServerOptions(req, res))(req, res, next);\n    });\n    return router;\n  }\n}\nexports.ApolloServer = ApolloServer;","map":{"version":3,"names":["express_1","__importDefault","require","cors_1","body_parser_1","graphql_playground_html_1","apollo_server_core_1","accepts_1","type_is_1","expressApollo_1","apollo_server_core_2","Object","defineProperty","exports","enumerable","get","GraphQLExtension","fileUploadMiddleware","uploadsConfig","server","req","res","next","processFileUploads","default","then","body","catch","error","status","expose","formatApolloErrors","formatter","requestOptions","formatError","debug","ApolloServer","ApolloServerBase","constructor","config","createGraphQLServerOptions","_super","graphQLServerOptions","call","supportsSubscriptions","supportsUploads","applyMiddleware","_a","app","rest","__rest","use","getMiddleware","path","cors","bodyParserConfig","disableHealthCheck","onHealthCheck","arguments","length","undefined","router","Router","promiseWillStart","willStart","_req","_res","type","json","uploadsMiddleware","graphqlPath","playgroundOptions","method","accept","types","prefersHTML","find","x","playgroundRenderPageOptions","assign","endpoint","originalUrl","subscriptionEndpoint","subscriptionsPath","setHeader","playground","renderPlaygroundPage","write","end","graphqlExpress"],"sources":["/Users/venusrodin/node_modules/apollo-server-express/src/ApolloServer.ts"],"sourcesContent":["import express from 'express';\nimport corsMiddleware from 'cors';\nimport { json, OptionsJson } from 'body-parser';\nimport {\n  renderPlaygroundPage,\n  RenderPageOptions as PlaygroundRenderPageOptions,\n} from '@apollographql/graphql-playground-html';\nimport {\n  GraphQLOptions,\n  FileUploadOptions,\n  ApolloServerBase,\n  formatApolloErrors,\n  processFileUploads,\n  ContextFunction,\n  Context,\n  Config,\n} from 'apollo-server-core';\nimport { ExecutionParams } from 'subscriptions-transport-ws';\nimport accepts from 'accepts';\nimport typeis from 'type-is';\nimport { graphqlExpress } from './expressApollo';\n\nexport { GraphQLOptions, GraphQLExtension } from 'apollo-server-core';\n\nexport interface GetMiddlewareOptions {\n  path?: string;\n  cors?: corsMiddleware.CorsOptions | corsMiddleware.CorsOptionsDelegate | boolean;\n  bodyParserConfig?: OptionsJson | boolean;\n  onHealthCheck?: (req: express.Request) => Promise<any>;\n  disableHealthCheck?: boolean;\n}\n\nexport interface ServerRegistration extends GetMiddlewareOptions {\n  // Note: You can also pass a connect.Server here. If we changed this field to\n  // `express.Application | connect.Server`, it would be very hard to get the\n  // app.use calls to typecheck even though they do work properly. Our\n  // assumption is that very few people use connect with TypeScript (and in fact\n  // we suspect the only connect users left writing GraphQL apps are Meteor\n  // users).\n  app: express.Application;\n}\n\nconst fileUploadMiddleware = (\n  uploadsConfig: FileUploadOptions,\n  server: ApolloServerBase,\n) => (\n  req: express.Request,\n  res: express.Response,\n  next: express.NextFunction,\n) => {\n  // Note: we use typeis directly instead of via req.is for connect support.\n  if (\n    typeof processFileUploads === 'function' &&\n    typeis(req, ['multipart/form-data'])\n  ) {\n    processFileUploads(req, res, uploadsConfig)\n      .then(body => {\n        req.body = body;\n        next();\n      })\n      .catch(error => {\n        if (error.status && error.expose) res.status(error.status);\n\n        next(\n          formatApolloErrors([error], {\n            formatter: server.requestOptions.formatError,\n            debug: server.requestOptions.debug,\n          }),\n        );\n      });\n  } else {\n    next();\n  }\n};\n\nexport interface ExpressContext {\n  req: express.Request;\n  res: express.Response;\n  connection?: ExecutionParams;\n}\n\nexport interface ApolloServerExpressConfig extends Config {\n  context?: ContextFunction<ExpressContext, Context> | Context;\n}\n\nexport class ApolloServer extends ApolloServerBase {\n  constructor(config: ApolloServerExpressConfig) {\n    super(config);\n  }\n\n  // This translates the arguments from the middleware into graphQL options It\n  // provides typings for the integration specific behavior, ideally this would\n  // be propagated with a generic to the super class\n  async createGraphQLServerOptions(\n    req: express.Request,\n    res: express.Response,\n  ): Promise<GraphQLOptions> {\n    return super.graphQLServerOptions({ req, res });\n  }\n\n  protected supportsSubscriptions(): boolean {\n    return true;\n  }\n\n  protected supportsUploads(): boolean {\n    return true;\n  }\n\n  public applyMiddleware({ app, ...rest }: ServerRegistration) {\n    app.use(this.getMiddleware(rest));\n  }\n\n  // TODO: While `express` is not Promise-aware, this should become `async` in\n  // a major release in order to align the API with other integrations (e.g.\n  // Hapi) which must be `async`.\n  public getMiddleware({\n    path,\n    cors,\n    bodyParserConfig,\n    disableHealthCheck,\n    onHealthCheck,\n  }: GetMiddlewareOptions = {}): express.Router {\n    if (!path) path = '/graphql';\n\n    const router = express.Router();\n\n    // Despite the fact that this `applyMiddleware` function is `async` in\n    // other integrations (e.g. Hapi), currently it is not for Express (@here).\n    // That should change in a future version, but that would be a breaking\n    // change right now (see comment above this method's declaration above).\n    //\n    // That said, we do need to await the `willStart` lifecycle event which\n    // can perform work prior to serving a request.  Since Express doesn't\n    // natively support Promises yet, we'll do this via a middleware that\n    // calls `next` when the `willStart` finishes.  We'll kick off the\n    // `willStart` right away, so hopefully it'll finish before the first\n    // request comes in, but we won't call `next` on this middleware until it\n    // does. (And we'll take care to surface any errors via the `.catch`-able.)\n    const promiseWillStart = this.willStart();\n\n    router.use(path, (_req, _res, next) => {\n      promiseWillStart.then(() => next()).catch(next);\n    });\n\n    if (!disableHealthCheck) {\n      router.use('/.well-known/apollo/server-health', (req, res) => {\n        // Response follows https://tools.ietf.org/html/draft-inadarei-api-health-check-01\n        res.type('application/health+json');\n\n        if (onHealthCheck) {\n          onHealthCheck(req)\n            .then(() => {\n              res.json({ status: 'pass' });\n            })\n            .catch(() => {\n              res.status(503).json({ status: 'fail' });\n            });\n        } else {\n          res.json({ status: 'pass' });\n        }\n      });\n    }\n\n    let uploadsMiddleware;\n    if (this.uploadsConfig && typeof processFileUploads === 'function') {\n      uploadsMiddleware = fileUploadMiddleware(this.uploadsConfig, this);\n    }\n\n    // XXX multiple paths?\n    this.graphqlPath = path;\n\n    // Note that we don't just pass all of these handlers to a single app.use call\n    // for 'connect' compatibility.\n    if (cors === true) {\n      router.use(path, corsMiddleware());\n    } else if (cors !== false) {\n      router.use(path, corsMiddleware(cors));\n    }\n\n    if (bodyParserConfig === true) {\n      router.use(path, json());\n    } else if (bodyParserConfig !== false) {\n      router.use(path, json(bodyParserConfig));\n    }\n\n    if (uploadsMiddleware) {\n      router.use(path, uploadsMiddleware);\n    }\n\n    // Note: if you enable playground in production and expect to be able to see your\n    // schema, you'll need to manually specify `introspection: true` in the\n    // ApolloServer constructor; by default, the introspection query is only\n    // enabled in dev.\n    router.use(path, (req, res, next) => {\n      if (this.playgroundOptions && req.method === 'GET') {\n        // perform more expensive content-type check only if necessary\n        // XXX We could potentially move this logic into the GuiOptions lambda,\n        // but I don't think it needs any overriding\n        const accept = accepts(req);\n        const types = accept.types() as string[];\n        const prefersHTML =\n          types.find(\n            (x: string) => x === 'text/html' || x === 'application/json',\n          ) === 'text/html';\n\n        if (prefersHTML) {\n          const playgroundRenderPageOptions: PlaygroundRenderPageOptions = {\n            endpoint: req.originalUrl,\n            subscriptionEndpoint: this.subscriptionsPath,\n            ...this.playgroundOptions,\n          };\n          res.setHeader('Content-Type', 'text/html');\n          const playground = renderPlaygroundPage(playgroundRenderPageOptions);\n          res.write(playground);\n          res.end();\n          return;\n        }\n      }\n\n      return graphqlExpress(() => this.createGraphQLServerOptions(req, res))(\n        req,\n        res,\n        next,\n      );\n    });\n\n    return router;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,SAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,MAAA,GAAAF,eAAA,CAAAC,OAAA;AACA,MAAAE,aAAA,GAAAF,OAAA;AACA,MAAAG,yBAAA,GAAAH,OAAA;AAIA,MAAAI,oBAAA,GAAAJ,OAAA;AAWA,MAAAK,SAAA,GAAAN,eAAA,CAAAC,OAAA;AACA,MAAAM,SAAA,GAAAP,eAAA,CAAAC,OAAA;AACA,MAAAO,eAAA,GAAAP,OAAA;AAEA,IAAAQ,oBAAA,GAAAR,OAAA;AAAyBS,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAL,oBAAA,CAAAM,gBAAgB;EAAA;AAAA;AAoBzC,MAAMC,oBAAoB,GAAGA,CAC3BC,aAAgC,EAChCC,MAAwB,KACrB,CACHC,GAAoB,EACpBC,GAAqB,EACrBC,IAA0B,KACxB;EAEF,IACE,OAAOhB,oBAAA,CAAAiB,kBAAkB,KAAK,UAAU,IACxCf,SAAA,CAAAgB,OAAM,CAACJ,GAAG,EAAE,CAAC,qBAAqB,CAAC,CAAC,EACpC;IACAd,oBAAA,CAAAiB,kBAAkB,CAACH,GAAG,EAAEC,GAAG,EAAEH,aAAa,CAAC,CACxCO,IAAI,CAACC,IAAI,IAAG;MACXN,GAAG,CAACM,IAAI,GAAGA,IAAI;MACfJ,IAAI,EAAE;IACR,CAAC,CAAC,CACDK,KAAK,CAACC,KAAK,IAAG;MACb,IAAIA,KAAK,CAACC,MAAM,IAAID,KAAK,CAACE,MAAM,EAAET,GAAG,CAACQ,MAAM,CAACD,KAAK,CAACC,MAAM,CAAC;MAE1DP,IAAI,CACFhB,oBAAA,CAAAyB,kBAAkB,CAAC,CAACH,KAAK,CAAC,EAAE;QAC1BI,SAAS,EAAEb,MAAM,CAACc,cAAc,CAACC,WAAW;QAC5CC,KAAK,EAAEhB,MAAM,CAACc,cAAc,CAACE;OAC9B,CAAC,CACH;IACH,CAAC,CAAC;GACL,MAAM;IACLb,IAAI,EAAE;;AAEV,CAAC;AAYD,MAAac,YAAa,SAAQ9B,oBAAA,CAAA+B,gBAAgB;EAChDC,YAAYC,MAAiC;IAC3C,KAAK,CAACA,MAAM,CAAC;EACf;EAKMC,0BAA0BA,CAC9BpB,GAAoB,EACpBC,GAAqB;;;;;;;MAErB,OAAOoB,MAAA,CAAMC,oBAAoB,CAAAC,IAAA,OAAC;QAAEvB,GAAG;QAAEC;MAAG,CAAE;IAChD,CAAC;;EAESuB,qBAAqBA,CAAA;IAC7B,OAAO,IAAI;EACb;EAEUC,eAAeA,CAAA;IACvB,OAAO,IAAI;EACb;EAEOC,eAAeA,CAACC,EAAoC;QAApC;QAAEC;MAAG,IAAAD,EAA+B;MAA1BE,IAAI,GAAAC,MAAA,CAAAH,EAAA,EAAd,OAAgB,CAAF;IACnCC,GAAG,CAACG,GAAG,CAAC,IAAI,CAACC,aAAa,CAACH,IAAI,CAAC,CAAC;EACnC;EAKOG,aAAaA,CAAA,EAMQ;IAAA,IANP;MACnBC,IAAI;MACJC,IAAI;MACJC,gBAAgB;MAChBC,kBAAkB;MAClBC;IAAa,IAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MACW,EAAE;IAC1B,IAAI,CAACL,IAAI,EAAEA,IAAI,GAAG,UAAU;IAE5B,MAAMQ,MAAM,GAAG7D,SAAA,CAAAwB,OAAO,CAACsC,MAAM,EAAE;IAc/B,MAAMC,gBAAgB,GAAG,IAAI,CAACC,SAAS,EAAE;IAEzCH,MAAM,CAACV,GAAG,CAACE,IAAI,EAAE,CAACY,IAAI,EAAEC,IAAI,EAAE5C,IAAI,KAAI;MACpCyC,gBAAgB,CAACtC,IAAI,CAAC,MAAMH,IAAI,EAAE,CAAC,CAACK,KAAK,CAACL,IAAI,CAAC;IACjD,CAAC,CAAC;IAEF,IAAI,CAACkC,kBAAkB,EAAE;MACvBK,MAAM,CAACV,GAAG,CAAC,mCAAmC,EAAE,CAAC/B,GAAG,EAAEC,GAAG,KAAI;QAE3DA,GAAG,CAAC8C,IAAI,CAAC,yBAAyB,CAAC;QAEnC,IAAIV,aAAa,EAAE;UACjBA,aAAa,CAACrC,GAAG,CAAC,CACfK,IAAI,CAAC,MAAK;YACTJ,GAAG,CAAC+C,IAAI,CAAC;cAAEvC,MAAM,EAAE;YAAM,CAAE,CAAC;UAC9B,CAAC,CAAC,CACDF,KAAK,CAAC,MAAK;YACVN,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACuC,IAAI,CAAC;cAAEvC,MAAM,EAAE;YAAM,CAAE,CAAC;UAC1C,CAAC,CAAC;SACL,MAAM;UACLR,GAAG,CAAC+C,IAAI,CAAC;YAAEvC,MAAM,EAAE;UAAM,CAAE,CAAC;;MAEhC,CAAC,CAAC;;IAGJ,IAAIwC,iBAAiB;IACrB,IAAI,IAAI,CAACnD,aAAa,IAAI,OAAOZ,oBAAA,CAAAiB,kBAAkB,KAAK,UAAU,EAAE;MAClE8C,iBAAiB,GAAGpD,oBAAoB,CAAC,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC;;IAIpE,IAAI,CAACoD,WAAW,GAAGjB,IAAI;IAIvB,IAAIC,IAAI,KAAK,IAAI,EAAE;MACjBO,MAAM,CAACV,GAAG,CAACE,IAAI,EAAElD,MAAA,CAAAqB,OAAc,EAAE,CAAC;KACnC,MAAM,IAAI8B,IAAI,KAAK,KAAK,EAAE;MACzBO,MAAM,CAACV,GAAG,CAACE,IAAI,EAAElD,MAAA,CAAAqB,OAAc,CAAC8B,IAAI,CAAC,CAAC;;IAGxC,IAAIC,gBAAgB,KAAK,IAAI,EAAE;MAC7BM,MAAM,CAACV,GAAG,CAACE,IAAI,EAAEjD,aAAA,CAAAgE,IAAI,EAAE,CAAC;KACzB,MAAM,IAAIb,gBAAgB,KAAK,KAAK,EAAE;MACrCM,MAAM,CAACV,GAAG,CAACE,IAAI,EAAEjD,aAAA,CAAAgE,IAAI,CAACb,gBAAgB,CAAC,CAAC;;IAG1C,IAAIc,iBAAiB,EAAE;MACrBR,MAAM,CAACV,GAAG,CAACE,IAAI,EAAEgB,iBAAiB,CAAC;;IAOrCR,MAAM,CAACV,GAAG,CAACE,IAAI,EAAE,CAACjC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAI;MAClC,IAAI,IAAI,CAACiD,iBAAiB,IAAInD,GAAG,CAACoD,MAAM,KAAK,KAAK,EAAE;QAIlD,MAAMC,MAAM,GAAGlE,SAAA,CAAAiB,OAAO,CAACJ,GAAG,CAAC;QAC3B,MAAMsD,KAAK,GAAGD,MAAM,CAACC,KAAK,EAAc;QACxC,MAAMC,WAAW,GACfD,KAAK,CAACE,IAAI,CACPC,CAAS,IAAKA,CAAC,KAAK,WAAW,IAAIA,CAAC,KAAK,kBAAkB,CAC7D,KAAK,WAAW;QAEnB,IAAIF,WAAW,EAAE;UACf,MAAMG,2BAA2B,GAAAnE,MAAA,CAAAoE,MAAA;YAC/BC,QAAQ,EAAE5D,GAAG,CAAC6D,WAAW;YACzBC,oBAAoB,EAAE,IAAI,CAACC;UAAiB,GACzC,IAAI,CAACZ,iBAAiB,CAC1B;UACDlD,GAAG,CAAC+D,SAAS,CAAC,cAAc,EAAE,WAAW,CAAC;UAC1C,MAAMC,UAAU,GAAGhF,yBAAA,CAAAiF,oBAAoB,CAACR,2BAA2B,CAAC;UACpEzD,GAAG,CAACkE,KAAK,CAACF,UAAU,CAAC;UACrBhE,GAAG,CAACmE,GAAG,EAAE;UACT;;;MAIJ,OAAO/E,eAAA,CAAAgF,cAAc,CAAC,MAAM,IAAI,CAACjD,0BAA0B,CAACpB,GAAG,EAAEC,GAAG,CAAC,CAAC,CACpED,GAAG,EACHC,GAAG,EACHC,IAAI,CACL;IACH,CAAC,CAAC;IAEF,OAAOuC,MAAM;EACf;;AA9IFhD,OAAA,CAAAuB,YAAA,GAAAA,YAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}