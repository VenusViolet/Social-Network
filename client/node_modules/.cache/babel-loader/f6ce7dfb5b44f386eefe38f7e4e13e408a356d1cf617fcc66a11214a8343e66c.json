{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar graphql_1 = require(\"graphql\");\nvar implementsAbstractType_1 = require(\"../implementsAbstractType\");\nvar ExpandAbstractTypes = /** @class */function () {\n  function ExpandAbstractTypes(transformedSchema, targetSchema) {\n    this.targetSchema = targetSchema;\n    this.mapping = extractPossibleTypes(transformedSchema, targetSchema);\n    this.reverseMapping = flipMapping(this.mapping);\n  }\n  ExpandAbstractTypes.prototype.transformRequest = function (originalRequest) {\n    var document = expandAbstractTypes(this.targetSchema, this.mapping, this.reverseMapping, originalRequest.document);\n    return __assign(__assign({}, originalRequest), {\n      document: document\n    });\n  };\n  return ExpandAbstractTypes;\n}();\nexports.default = ExpandAbstractTypes;\nfunction extractPossibleTypes(transformedSchema, targetSchema) {\n  var typeMap = transformedSchema.getTypeMap();\n  var mapping = {};\n  Object.keys(typeMap).forEach(function (typeName) {\n    var type = typeMap[typeName];\n    if (graphql_1.isAbstractType(type)) {\n      var targetType = targetSchema.getType(typeName);\n      if (!graphql_1.isAbstractType(targetType)) {\n        var implementations = transformedSchema.getPossibleTypes(type) || [];\n        mapping[typeName] = implementations.filter(function (impl) {\n          return targetSchema.getType(impl.name);\n        }).map(function (impl) {\n          return impl.name;\n        });\n      }\n    }\n  });\n  return mapping;\n}\nfunction flipMapping(mapping) {\n  var result = {};\n  Object.keys(mapping).forEach(function (typeName) {\n    var toTypeNames = mapping[typeName];\n    toTypeNames.forEach(function (toTypeName) {\n      if (!result[toTypeName]) {\n        result[toTypeName] = [];\n      }\n      result[toTypeName].push(typeName);\n    });\n  });\n  return result;\n}\nfunction expandAbstractTypes(targetSchema, mapping, reverseMapping, document) {\n  var _a;\n  var operations = document.definitions.filter(function (def) {\n    return def.kind === graphql_1.Kind.OPERATION_DEFINITION;\n  });\n  var fragments = document.definitions.filter(function (def) {\n    return def.kind === graphql_1.Kind.FRAGMENT_DEFINITION;\n  });\n  var existingFragmentNames = fragments.map(function (fragment) {\n    return fragment.name.value;\n  });\n  var fragmentCounter = 0;\n  var generateFragmentName = function (typeName) {\n    var fragmentName;\n    do {\n      fragmentName = \"_\" + typeName + \"_Fragment\" + fragmentCounter;\n      fragmentCounter++;\n    } while (existingFragmentNames.indexOf(fragmentName) !== -1);\n    return fragmentName;\n  };\n  var newFragments = [];\n  var fragmentReplacements = {};\n  fragments.forEach(function (fragment) {\n    newFragments.push(fragment);\n    var possibleTypes = mapping[fragment.typeCondition.name.value];\n    if (possibleTypes) {\n      fragmentReplacements[fragment.name.value] = [];\n      possibleTypes.forEach(function (possibleTypeName) {\n        var name = generateFragmentName(possibleTypeName);\n        existingFragmentNames.push(name);\n        var newFragment = {\n          kind: graphql_1.Kind.FRAGMENT_DEFINITION,\n          name: {\n            kind: graphql_1.Kind.NAME,\n            value: name\n          },\n          typeCondition: {\n            kind: graphql_1.Kind.NAMED_TYPE,\n            name: {\n              kind: graphql_1.Kind.NAME,\n              value: possibleTypeName\n            }\n          },\n          selectionSet: fragment.selectionSet\n        };\n        newFragments.push(newFragment);\n        fragmentReplacements[fragment.name.value].push({\n          fragmentName: name,\n          typeName: possibleTypeName\n        });\n      });\n    }\n  });\n  var newDocument = __assign(__assign({}, document), {\n    definitions: __spreadArrays(operations, newFragments)\n  });\n  var typeInfo = new graphql_1.TypeInfo(targetSchema);\n  return graphql_1.visit(newDocument, graphql_1.visitWithTypeInfo(typeInfo, (_a = {}, _a[graphql_1.Kind.SELECTION_SET] = function (node) {\n    var newSelections = __spreadArrays(node.selections);\n    var parentType = graphql_1.getNamedType(typeInfo.getParentType());\n    node.selections.forEach(function (selection) {\n      if (selection.kind === graphql_1.Kind.INLINE_FRAGMENT) {\n        var possibleTypes = mapping[selection.typeCondition.name.value];\n        if (possibleTypes) {\n          possibleTypes.forEach(function (possibleType) {\n            if (implementsAbstractType_1.default(targetSchema, parentType, targetSchema.getType(possibleType))) {\n              newSelections.push({\n                kind: graphql_1.Kind.INLINE_FRAGMENT,\n                typeCondition: {\n                  kind: graphql_1.Kind.NAMED_TYPE,\n                  name: {\n                    kind: graphql_1.Kind.NAME,\n                    value: possibleType\n                  }\n                },\n                selectionSet: selection.selectionSet\n              });\n            }\n          });\n        }\n      } else if (selection.kind === graphql_1.Kind.FRAGMENT_SPREAD) {\n        var fragmentName = selection.name.value;\n        var replacements = fragmentReplacements[fragmentName];\n        if (replacements) {\n          replacements.forEach(function (replacement) {\n            var typeName = replacement.typeName;\n            if (implementsAbstractType_1.default(targetSchema, parentType, targetSchema.getType(typeName))) {\n              newSelections.push({\n                kind: graphql_1.Kind.FRAGMENT_SPREAD,\n                name: {\n                  kind: graphql_1.Kind.NAME,\n                  value: replacement.fragmentName\n                }\n              });\n            }\n          });\n        }\n      }\n    });\n    if (parentType && reverseMapping[parentType.name]) {\n      newSelections.push({\n        kind: graphql_1.Kind.FIELD,\n        name: {\n          kind: graphql_1.Kind.NAME,\n          value: '__typename'\n        }\n      });\n    }\n    if (newSelections.length !== node.selections.length) {\n      return __assign(__assign({}, node), {\n        selections: newSelections\n      });\n    }\n  }, _a)));\n}","map":{"version":3,"names":["graphql_1","require","implementsAbstractType_1","ExpandAbstractTypes","transformedSchema","targetSchema","mapping","extractPossibleTypes","reverseMapping","flipMapping","prototype","transformRequest","originalRequest","document","expandAbstractTypes","__assign","typeMap","getTypeMap","Object","keys","forEach","typeName","type","isAbstractType","targetType","getType","implementations","getPossibleTypes","filter","impl","name","map","result","toTypeNames","toTypeName","push","operations","definitions","def","kind","Kind","OPERATION_DEFINITION","fragments","FRAGMENT_DEFINITION","existingFragmentNames","fragment","value","fragmentCounter","generateFragmentName","fragmentName","indexOf","newFragments","fragmentReplacements","possibleTypes","typeCondition","possibleTypeName","newFragment","NAME","NAMED_TYPE","selectionSet","newDocument","__spreadArrays","typeInfo","TypeInfo","visit","visitWithTypeInfo","_a","SELECTION_SET","node","newSelections","selections","parentType","getNamedType","getParentType","selection","INLINE_FRAGMENT","possibleType","default","FRAGMENT_SPREAD","replacements","replacement","FIELD","length"],"sources":["../../src/transforms/ExpandAbstractTypes.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}