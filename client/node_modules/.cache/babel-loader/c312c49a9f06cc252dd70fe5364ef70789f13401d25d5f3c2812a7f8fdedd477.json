{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformSchema = void 0;\nconst graphql_1 = require(\"graphql\");\nconst mapValues_1 = require(\"../utilities/mapValues\");\nfunction transformSchema(schema, transformType) {\n  const typeMap = Object.create(null);\n  for (const oldType of Object.values(schema.getTypeMap())) {\n    if ((0, graphql_1.isIntrospectionType)(oldType)) continue;\n    const result = transformType(oldType);\n    if (result === null) continue;\n    const newType = result || oldType;\n    typeMap[newType.name] = recreateNamedType(newType);\n  }\n  const schemaConfig = schema.toConfig();\n  return new graphql_1.GraphQLSchema(Object.assign(Object.assign({}, schemaConfig), {\n    types: Object.values(typeMap),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription),\n    directives: replaceDirectives(schemaConfig.directives)\n  }));\n  function recreateNamedType(type) {\n    if ((0, graphql_1.isObjectType)(type)) {\n      const config = type.toConfig();\n      return new graphql_1.GraphQLObjectType(Object.assign(Object.assign({}, config), {\n        interfaces: () => config.interfaces.map(replaceNamedType),\n        fields: () => replaceFields(config.fields)\n      }));\n    } else if ((0, graphql_1.isInterfaceType)(type)) {\n      const config = type.toConfig();\n      return new graphql_1.GraphQLInterfaceType(Object.assign(Object.assign({}, config), {\n        interfaces: () => config.interfaces.map(replaceNamedType),\n        fields: () => replaceFields(config.fields)\n      }));\n    } else if ((0, graphql_1.isUnionType)(type)) {\n      const config = type.toConfig();\n      return new graphql_1.GraphQLUnionType(Object.assign(Object.assign({}, config), {\n        types: () => config.types.map(replaceNamedType)\n      }));\n    } else if ((0, graphql_1.isInputObjectType)(type)) {\n      const config = type.toConfig();\n      return new graphql_1.GraphQLInputObjectType(Object.assign(Object.assign({}, config), {\n        fields: () => replaceInputFields(config.fields)\n      }));\n    }\n    return type;\n  }\n  function replaceType(type) {\n    if ((0, graphql_1.isListType)(type)) {\n      return new graphql_1.GraphQLList(replaceType(type.ofType));\n    } else if ((0, graphql_1.isNonNullType)(type)) {\n      return new graphql_1.GraphQLNonNull(replaceType(type.ofType));\n    }\n    return replaceNamedType(type);\n  }\n  function replaceNamedType(type) {\n    const newType = typeMap[type.name];\n    return newType ? newType : type;\n  }\n  function replaceMaybeType(type) {\n    return type ? replaceNamedType(type) : undefined;\n  }\n  function replaceFields(fieldsMap) {\n    return (0, mapValues_1.mapValues)(fieldsMap, field => Object.assign(Object.assign({}, field), {\n      type: replaceType(field.type),\n      args: field.args ? replaceArgs(field.args) : undefined\n    }));\n  }\n  function replaceInputFields(fieldsMap) {\n    return (0, mapValues_1.mapValues)(fieldsMap, field => Object.assign(Object.assign({}, field), {\n      type: replaceType(field.type)\n    }));\n  }\n  function replaceArgs(args) {\n    return (0, mapValues_1.mapValues)(args, arg => Object.assign(Object.assign({}, arg), {\n      type: replaceType(arg.type)\n    }));\n  }\n  function replaceDirectives(directives) {\n    return directives.map(directive => {\n      const config = directive.toConfig();\n      return new graphql_1.GraphQLDirective(Object.assign(Object.assign({}, config), {\n        args: replaceArgs(config.args)\n      }));\n    });\n  }\n}\nexports.transformSchema = transformSchema;","map":{"version":3,"names":["graphql_1","require","mapValues_1","transformSchema","schema","transformType","typeMap","Object","create","oldType","values","getTypeMap","isIntrospectionType","result","newType","name","recreateNamedType","schemaConfig","toConfig","GraphQLSchema","assign","types","query","replaceMaybeType","mutation","subscription","directives","replaceDirectives","type","isObjectType","config","GraphQLObjectType","interfaces","map","replaceNamedType","fields","replaceFields","isInterfaceType","GraphQLInterfaceType","isUnionType","GraphQLUnionType","isInputObjectType","GraphQLInputObjectType","replaceInputFields","replaceType","isListType","GraphQLList","ofType","isNonNullType","GraphQLNonNull","undefined","fieldsMap","mapValues","field","args","replaceArgs","arg","directive","GraphQLDirective","exports"],"sources":["/Users/venusrodin/node_modules/apollo-graphql/src/schema/transformSchema.ts"],"sourcesContent":["import {\n  GraphQLSchema,\n  GraphQLNamedType,\n  isIntrospectionType,\n  isObjectType,\n  GraphQLObjectType,\n  GraphQLType,\n  isListType,\n  GraphQLList,\n  isNonNullType,\n  GraphQLNonNull,\n  GraphQLFieldConfigMap,\n  GraphQLFieldConfigArgumentMap,\n  GraphQLOutputType,\n  GraphQLInputType,\n  isInterfaceType,\n  GraphQLInterfaceType,\n  isUnionType,\n  GraphQLUnionType,\n  isInputObjectType,\n  GraphQLInputObjectType,\n  GraphQLInputFieldConfigMap,\n  GraphQLDirective,\n} from \"graphql\";\nimport { mapValues } from \"../utilities/mapValues\";\n\ntype TypeTransformer = (\n  type: GraphQLNamedType\n) => GraphQLNamedType | null | undefined;\n\nexport function transformSchema(\n  schema: GraphQLSchema,\n  transformType: TypeTransformer\n): GraphQLSchema {\n  const typeMap: { [typeName: string]: GraphQLNamedType } = Object.create(null);\n\n  for (const oldType of Object.values(schema.getTypeMap())) {\n    if (isIntrospectionType(oldType)) continue;\n\n    const result = transformType(oldType);\n\n    // Returning `null` removes the type.\n    if (result === null) continue;\n\n    // Returning `undefined` keeps the old type.\n    const newType = result || oldType;\n    typeMap[newType.name] = recreateNamedType(newType);\n  }\n\n  const schemaConfig = schema.toConfig();\n\n  return new GraphQLSchema({\n    ...schemaConfig,\n    types: Object.values(typeMap),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription),\n    directives: replaceDirectives(schemaConfig.directives),\n  });\n\n  function recreateNamedType(type: GraphQLNamedType): GraphQLNamedType {\n    if (isObjectType(type)) {\n      const config = type.toConfig();\n\n      return new GraphQLObjectType({\n        ...config,\n        interfaces: () => config.interfaces.map(replaceNamedType),\n        fields: () => replaceFields(config.fields),\n      });\n    } else if (isInterfaceType(type)) {\n      const config = type.toConfig();\n\n      return new GraphQLInterfaceType({\n        ...config,\n        interfaces: () => config.interfaces.map(replaceNamedType),\n        fields: () => replaceFields(config.fields),\n      });\n    } else if (isUnionType(type)) {\n      const config = type.toConfig();\n\n      return new GraphQLUnionType({\n        ...config,\n        types: () => config.types.map(replaceNamedType),\n      });\n    } else if (isInputObjectType(type)) {\n      const config = type.toConfig();\n\n      return new GraphQLInputObjectType({\n        ...config,\n        fields: () => replaceInputFields(config.fields),\n      });\n    }\n\n    return type;\n  }\n\n  function replaceType<T extends GraphQLType>(\n    type: GraphQLList<T>\n  ): GraphQLList<T>;\n  function replaceType<T extends GraphQLType>(\n    type: GraphQLNonNull<T>\n  ): GraphQLNonNull<T>;\n  function replaceType(type: GraphQLNamedType): GraphQLNamedType;\n  function replaceType(type: GraphQLOutputType): GraphQLOutputType;\n  function replaceType(type: GraphQLInputType): GraphQLInputType;\n  function replaceType(type: GraphQLType): GraphQLType {\n    if (isListType(type)) {\n      return new GraphQLList(replaceType(type.ofType));\n    } else if (isNonNullType(type)) {\n      return new GraphQLNonNull(replaceType(type.ofType));\n    }\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType<T extends GraphQLNamedType>(type: T): T {\n    const newType = typeMap[type.name] as T;\n    return newType ? newType : type;\n  }\n\n  function replaceMaybeType<T extends GraphQLNamedType>(\n    type: T | null | undefined\n  ): T | undefined {\n    return type ? replaceNamedType(type) : undefined;\n  }\n\n  function replaceFields<TSource, TContext>(\n    fieldsMap: GraphQLFieldConfigMap<TSource, TContext>\n  ): GraphQLFieldConfigMap<TSource, TContext> {\n    return mapValues(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n      args: field.args ? replaceArgs(field.args) : undefined,\n    }));\n  }\n\n  function replaceInputFields(\n    fieldsMap: GraphQLInputFieldConfigMap\n  ): GraphQLInputFieldConfigMap {\n    return mapValues(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n    }));\n  }\n\n  function replaceArgs(args: GraphQLFieldConfigArgumentMap) {\n    return mapValues(args, (arg) => ({\n      ...arg,\n      type: replaceType(arg.type),\n    }));\n  }\n\n  function replaceDirectives(directives: GraphQLDirective[]) {\n    return directives.map((directive) => {\n      const config = directive.toConfig();\n      return new GraphQLDirective({\n        ...config,\n        args: replaceArgs(config.args),\n      });\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}