{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.graphqlExpress = void 0;\nconst apollo_server_core_1 = require(\"apollo-server-core\");\nfunction graphqlExpress(options) {\n  if (!options) {\n    throw new Error('Apollo Server requires options.');\n  }\n  if (arguments.length > 1) {\n    throw new Error(`Apollo Server expects exactly one argument, got ${arguments.length}`);\n  }\n  return (req, res, next) => {\n    apollo_server_core_1.runHttpQuery([req, res], {\n      method: req.method,\n      options: options,\n      query: req.method === 'POST' ? req.body : req.query,\n      request: apollo_server_core_1.convertNodeHttpToRequest(req)\n    }).then(_ref => {\n      let {\n        graphqlResponse,\n        responseInit\n      } = _ref;\n      if (responseInit.headers) {\n        for (const [name, value] of Object.entries(responseInit.headers)) {\n          res.setHeader(name, value);\n        }\n      }\n      if (typeof res.send === 'function') {\n        res.send(graphqlResponse);\n      } else {\n        res.end(graphqlResponse);\n      }\n    }, error => {\n      if ('HttpQueryError' !== error.name) {\n        return next(error);\n      }\n      if (error.headers) {\n        for (const [name, value] of Object.entries(error.headers)) {\n          res.setHeader(name, value);\n        }\n      }\n      res.statusCode = error.statusCode;\n      if (typeof res.send === 'function') {\n        res.send(error.message);\n      } else {\n        res.end(error.message);\n      }\n    });\n  };\n}\nexports.graphqlExpress = graphqlExpress;","map":{"version":3,"names":["apollo_server_core_1","require","graphqlExpress","options","Error","arguments","length","req","res","next","runHttpQuery","method","query","body","request","convertNodeHttpToRequest","then","_ref","graphqlResponse","responseInit","headers","name","value","Object","entries","setHeader","send","end","error","statusCode","message","exports"],"sources":["/Users/venusrodin/node_modules/apollo-server-express/src/expressApollo.ts"],"sourcesContent":["import express from 'express';\nimport {\n  GraphQLOptions,\n  HttpQueryError,\n  runHttpQuery,\n  convertNodeHttpToRequest,\n} from 'apollo-server-core';\nimport { ValueOrPromise } from 'apollo-server-types';\n\nexport interface ExpressGraphQLOptionsFunction {\n  (req: express.Request, res: express.Response): ValueOrPromise<GraphQLOptions>;\n}\n\n// Design principles:\n// - there is just one way allowed: POST request with JSON body. Nothing else.\n// - simple, fast and secure\n//\n\nexport function graphqlExpress(\n  options: GraphQLOptions | ExpressGraphQLOptionsFunction,\n): express.Handler {\n  if (!options) {\n    throw new Error('Apollo Server requires options.');\n  }\n\n  if (arguments.length > 1) {\n    throw new Error(\n      `Apollo Server expects exactly one argument, got ${arguments.length}`,\n    );\n  }\n\n  return (req, res, next): void => {\n    runHttpQuery([req, res], {\n      method: req.method,\n      options: options,\n      query: req.method === 'POST' ? req.body : req.query,\n      request: convertNodeHttpToRequest(req),\n    }).then(\n      ({ graphqlResponse, responseInit }) => {\n        if (responseInit.headers) {\n          for (const [name, value] of Object.entries(responseInit.headers)) {\n            res.setHeader(name, value);\n          }\n        }\n\n        // Using `.send` is a best practice for Express, but we also just use\n        // `.end` for compatibility with `connect`.\n        if (typeof res.send === 'function') {\n          res.send(graphqlResponse);\n        } else {\n          res.end(graphqlResponse);\n        }\n      },\n      (error: HttpQueryError) => {\n        if ('HttpQueryError' !== error.name) {\n          return next(error);\n        }\n\n        if (error.headers) {\n          for (const [name, value] of Object.entries(error.headers)) {\n            res.setHeader(name, value);\n          }\n        }\n\n        res.statusCode = error.statusCode;\n        if (typeof res.send === 'function') {\n          // Using `.send` is a best practice for Express, but we also just use\n          // `.end` for compatibility with `connect`.\n          res.send(error.message);\n        } else {\n          res.end(error.message);\n        }\n      },\n    );\n  };\n}\n"],"mappings":";;;;;;AACA,MAAAA,oBAAA,GAAAC,OAAA;AAiBA,SAAgBC,cAAcA,CAC5BC,OAAuD;EAEvD,IAAI,CAACA,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;;EAGpD,IAAIC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;IACxB,MAAM,IAAIF,KAAK,CACb,mDAAmDC,SAAS,CAACC,MAAM,EAAE,CACtE;;EAGH,OAAO,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAU;IAC9BT,oBAAA,CAAAU,YAAY,CAAC,CAACH,GAAG,EAAEC,GAAG,CAAC,EAAE;MACvBG,MAAM,EAAEJ,GAAG,CAACI,MAAM;MAClBR,OAAO,EAAEA,OAAO;MAChBS,KAAK,EAAEL,GAAG,CAACI,MAAM,KAAK,MAAM,GAAGJ,GAAG,CAACM,IAAI,GAAGN,GAAG,CAACK,KAAK;MACnDE,OAAO,EAAEd,oBAAA,CAAAe,wBAAwB,CAACR,GAAG;KACtC,CAAC,CAACS,IAAI,CACLC,IAAA,IAAsC;MAAA,IAArC;QAAEC,eAAe;QAAEC;MAAY,CAAE,GAAAF,IAAA;MAChC,IAAIE,YAAY,CAACC,OAAO,EAAE;QACxB,KAAK,MAAM,CAACC,IAAI,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACL,YAAY,CAACC,OAAO,CAAC,EAAE;UAChEZ,GAAG,CAACiB,SAAS,CAACJ,IAAI,EAAEC,KAAK,CAAC;;;MAM9B,IAAI,OAAOd,GAAG,CAACkB,IAAI,KAAK,UAAU,EAAE;QAClClB,GAAG,CAACkB,IAAI,CAACR,eAAe,CAAC;OAC1B,MAAM;QACLV,GAAG,CAACmB,GAAG,CAACT,eAAe,CAAC;;IAE5B,CAAC,EACAU,KAAqB,IAAI;MACxB,IAAI,gBAAgB,KAAKA,KAAK,CAACP,IAAI,EAAE;QACnC,OAAOZ,IAAI,CAACmB,KAAK,CAAC;;MAGpB,IAAIA,KAAK,CAACR,OAAO,EAAE;QACjB,KAAK,MAAM,CAACC,IAAI,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACI,KAAK,CAACR,OAAO,CAAC,EAAE;UACzDZ,GAAG,CAACiB,SAAS,CAACJ,IAAI,EAAEC,KAAK,CAAC;;;MAI9Bd,GAAG,CAACqB,UAAU,GAAGD,KAAK,CAACC,UAAU;MACjC,IAAI,OAAOrB,GAAG,CAACkB,IAAI,KAAK,UAAU,EAAE;QAGlClB,GAAG,CAACkB,IAAI,CAACE,KAAK,CAACE,OAAO,CAAC;OACxB,MAAM;QACLtB,GAAG,CAACmB,GAAG,CAACC,KAAK,CAACE,OAAO,CAAC;;IAE1B,CAAC,CACF;EACH,CAAC;AACH;AAzDAC,OAAA,CAAA7B,cAAA,GAAAA,cAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}