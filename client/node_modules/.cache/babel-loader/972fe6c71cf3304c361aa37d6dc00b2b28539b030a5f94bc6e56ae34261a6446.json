{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar graphql_1 = require(\"graphql\");\nvar implementsAbstractType_1 = require(\"../implementsAbstractType\");\nvar FilterToSchema = /** @class */function () {\n  function FilterToSchema(targetSchema) {\n    this.targetSchema = targetSchema;\n  }\n  FilterToSchema.prototype.transformRequest = function (originalRequest) {\n    var document = filterDocumentToSchema(this.targetSchema, originalRequest.document);\n    return __assign(__assign({}, originalRequest), {\n      document: document\n    });\n  };\n  return FilterToSchema;\n}();\nexports.default = FilterToSchema;\nfunction filterDocumentToSchema(targetSchema, document) {\n  var operations = document.definitions.filter(function (def) {\n    return def.kind === graphql_1.Kind.OPERATION_DEFINITION;\n  });\n  var fragments = document.definitions.filter(function (def) {\n    return def.kind === graphql_1.Kind.FRAGMENT_DEFINITION;\n  });\n  var usedFragments = [];\n  var newOperations = [];\n  var newFragments = [];\n  var validFragments = fragments.filter(function (fragment) {\n    var typeName = fragment.typeCondition.name.value;\n    return Boolean(targetSchema.getType(typeName));\n  });\n  var validFragmentsWithType = {};\n  validFragments.forEach(function (fragment) {\n    var typeName = fragment.typeCondition.name.value;\n    var type = targetSchema.getType(typeName);\n    validFragmentsWithType[fragment.name.value] = type;\n  });\n  var fragmentSet = Object.create(null);\n  operations.forEach(function (operation) {\n    var type;\n    if (operation.operation === 'subscription') {\n      type = targetSchema.getSubscriptionType();\n    } else if (operation.operation === 'mutation') {\n      type = targetSchema.getMutationType();\n    } else {\n      type = targetSchema.getQueryType();\n    }\n    var _a = filterSelectionSet(targetSchema, type, validFragmentsWithType, operation.selectionSet),\n      selectionSet = _a.selectionSet,\n      operationUsedFragments = _a.usedFragments,\n      operationUsedVariables = _a.usedVariables;\n    usedFragments = union(usedFragments, operationUsedFragments);\n    var _b = collectFragmentVariables(targetSchema, fragmentSet, validFragments, validFragmentsWithType, usedFragments),\n      collectedUsedVariables = _b.usedVariables,\n      collectedNewFragments = _b.newFragments,\n      collectedFragmentSet = _b.fragmentSet;\n    var fullUsedVariables = union(operationUsedVariables, collectedUsedVariables);\n    newFragments = collectedNewFragments;\n    fragmentSet = collectedFragmentSet;\n    var variableDefinitions = operation.variableDefinitions.filter(function (variable) {\n      return fullUsedVariables.indexOf(variable.variable.name.value) !== -1;\n    });\n    newOperations.push({\n      kind: graphql_1.Kind.OPERATION_DEFINITION,\n      operation: operation.operation,\n      name: operation.name,\n      directives: operation.directives,\n      variableDefinitions: variableDefinitions,\n      selectionSet: selectionSet\n    });\n  });\n  return {\n    kind: graphql_1.Kind.DOCUMENT,\n    definitions: __spreadArrays(newOperations, newFragments)\n  };\n}\nfunction collectFragmentVariables(targetSchema, fragmentSet, validFragments, validFragmentsWithType, usedFragments) {\n  var usedVariables = [];\n  var newFragments = [];\n  var _loop_1 = function () {\n    var nextFragmentName = usedFragments.pop();\n    var fragment = validFragments.find(function (fr) {\n      return fr.name.value === nextFragmentName;\n    });\n    if (fragment) {\n      var name_1 = nextFragmentName;\n      var typeName = fragment.typeCondition.name.value;\n      var type = targetSchema.getType(typeName);\n      var _a = filterSelectionSet(targetSchema, type, validFragmentsWithType, fragment.selectionSet),\n        selectionSet = _a.selectionSet,\n        fragmentUsedFragments = _a.usedFragments,\n        fragmentUsedVariables = _a.usedVariables;\n      usedFragments = union(usedFragments, fragmentUsedFragments);\n      usedVariables = union(usedVariables, fragmentUsedVariables);\n      if (!fragmentSet[name_1]) {\n        fragmentSet[name_1] = true;\n        newFragments.push({\n          kind: graphql_1.Kind.FRAGMENT_DEFINITION,\n          name: {\n            kind: graphql_1.Kind.NAME,\n            value: name_1\n          },\n          typeCondition: fragment.typeCondition,\n          selectionSet: selectionSet\n        });\n      }\n    }\n  };\n  while (usedFragments.length !== 0) {\n    _loop_1();\n  }\n  return {\n    usedVariables: usedVariables,\n    newFragments: newFragments,\n    fragmentSet: fragmentSet\n  };\n}\nfunction filterSelectionSet(schema, type, validFragments, selectionSet) {\n  var _a;\n  var usedFragments = [];\n  var usedVariables = [];\n  var typeStack = [type];\n  // Should be rewritten using visitWithSchema\n  var filteredSelectionSet = graphql_1.visit(selectionSet, (_a = {}, _a[graphql_1.Kind.FIELD] = {\n    enter: function (node) {\n      var parentType = resolveType(typeStack[typeStack.length - 1]);\n      if (parentType instanceof graphql_1.GraphQLObjectType || parentType instanceof graphql_1.GraphQLInterfaceType) {\n        var fields = parentType.getFields();\n        var field = node.name.value === '__typename' ? graphql_1.TypeNameMetaFieldDef : fields[node.name.value];\n        if (!field) {\n          return null;\n        } else {\n          typeStack.push(field.type);\n        }\n        var argNames_1 = (field.args || []).map(function (arg) {\n          return arg.name;\n        });\n        if (node.arguments) {\n          var args = node.arguments.filter(function (arg) {\n            return argNames_1.indexOf(arg.name.value) !== -1;\n          });\n          if (args.length !== node.arguments.length) {\n            return __assign(__assign({}, node), {\n              arguments: args\n            });\n          }\n        }\n      } else if (parentType instanceof graphql_1.GraphQLUnionType && node.name.value === '__typename') {\n        typeStack.push(graphql_1.TypeNameMetaFieldDef.type);\n      }\n    },\n    leave: function (node) {\n      var _a;\n      var currentType = typeStack.pop();\n      var resolvedType = resolveType(currentType);\n      if (resolvedType instanceof graphql_1.GraphQLObjectType || resolvedType instanceof graphql_1.GraphQLInterfaceType) {\n        var selections = node.selectionSet && node.selectionSet.selections || null;\n        if (!selections || selections.length === 0) {\n          // need to remove any added variables. Is there a better way to do this?\n          graphql_1.visit(node, (_a = {}, _a[graphql_1.Kind.VARIABLE] = function (variableNode) {\n            var index = usedVariables.indexOf(variableNode.name.value);\n            if (index !== -1) {\n              usedVariables.splice(index, 1);\n            }\n          }, _a));\n          return null;\n        }\n      }\n    }\n  }, _a[graphql_1.Kind.FRAGMENT_SPREAD] = function (node) {\n    if (node.name.value in validFragments) {\n      var parentType = resolveType(typeStack[typeStack.length - 1]);\n      var innerType = validFragments[node.name.value];\n      if (!implementsAbstractType_1.default(schema, parentType, innerType)) {\n        return null;\n      } else {\n        usedFragments.push(node.name.value);\n        return;\n      }\n    } else {\n      return null;\n    }\n  }, _a[graphql_1.Kind.INLINE_FRAGMENT] = {\n    enter: function (node) {\n      if (node.typeCondition) {\n        var innerType = schema.getType(node.typeCondition.name.value);\n        var parentType = resolveType(typeStack[typeStack.length - 1]);\n        if (implementsAbstractType_1.default(schema, parentType, innerType)) {\n          typeStack.push(innerType);\n        } else {\n          return null;\n        }\n      }\n    },\n    leave: function (node) {\n      typeStack.pop();\n    }\n  }, _a[graphql_1.Kind.VARIABLE] = function (node) {\n    usedVariables.push(node.name.value);\n  }, _a));\n  return {\n    selectionSet: filteredSelectionSet,\n    usedFragments: usedFragments,\n    usedVariables: usedVariables\n  };\n}\nfunction resolveType(type) {\n  var lastType = type;\n  while (lastType instanceof graphql_1.GraphQLNonNull || lastType instanceof graphql_1.GraphQLList) {\n    lastType = lastType.ofType;\n  }\n  return lastType;\n}\nfunction union() {\n  var arrays = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    arrays[_i] = arguments[_i];\n  }\n  var cache = {};\n  var result = [];\n  arrays.forEach(function (array) {\n    array.forEach(function (item) {\n      if (!cache[item]) {\n        cache[item] = true;\n        result.push(item);\n      }\n    });\n  });\n  return result;\n}","map":{"version":3,"names":["graphql_1","require","implementsAbstractType_1","FilterToSchema","targetSchema","prototype","transformRequest","originalRequest","document","filterDocumentToSchema","__assign","operations","definitions","filter","def","kind","Kind","OPERATION_DEFINITION","fragments","FRAGMENT_DEFINITION","usedFragments","newOperations","newFragments","validFragments","fragment","typeName","typeCondition","name","value","Boolean","getType","validFragmentsWithType","forEach","type","fragmentSet","Object","create","operation","getSubscriptionType","getMutationType","getQueryType","_a","filterSelectionSet","selectionSet","operationUsedFragments","operationUsedVariables","usedVariables","union","_b","collectFragmentVariables","collectedUsedVariables","collectedNewFragments","collectedFragmentSet","fullUsedVariables","variableDefinitions","variable","indexOf","push","directives","DOCUMENT","__spreadArrays","nextFragmentName","pop","find","fr","name_1","fragmentUsedFragments","fragmentUsedVariables","NAME","length","schema","typeStack","filteredSelectionSet","visit","FIELD","enter","node","parentType","resolveType","GraphQLObjectType","GraphQLInterfaceType","fields","getFields","field","TypeNameMetaFieldDef","argNames_1","args","map","arg","arguments","GraphQLUnionType","leave","currentType","resolvedType","selections","VARIABLE","variableNode","index","splice","FRAGMENT_SPREAD","innerType","default","INLINE_FRAGMENT","lastType","GraphQLNonNull","GraphQLList","ofType","arrays","_i","cache","result","array","item"],"sources":["../../src/transforms/FilterToSchema.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}