{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveGraphqlOptions = void 0;\nfunction resolveGraphqlOptions(options) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  return __awaiter(this, void 0, void 0, function* () {\n    if (typeof options === 'function') {\n      return yield options(...args);\n    } else {\n      return options;\n    }\n  });\n}\nexports.resolveGraphqlOptions = resolveGraphqlOptions;","map":{"version":3,"names":["resolveGraphqlOptions","options","_len","arguments","length","args","Array","_key","exports"],"sources":["/Users/venusrodin/node_modules/apollo-server-core/src/graphqlOptions.ts"],"sourcesContent":["import {\n  GraphQLSchema,\n  ValidationContext,\n  GraphQLFieldResolver,\n  DocumentNode,\n  GraphQLError,\n  GraphQLFormattedError,\n} from 'graphql';\nimport { GraphQLExtension } from 'graphql-extensions';\nimport { CacheControlExtensionOptions } from 'apollo-cache-control';\nimport { KeyValueCache, InMemoryLRUCache } from 'apollo-server-caching';\nimport { DataSource } from 'apollo-datasource';\nimport { ApolloServerPlugin } from 'apollo-server-plugin-base';\nimport { GraphQLParseOptions } from 'graphql-tools';\nimport {\n  GraphQLExecutor,\n  ValueOrPromise,\n  GraphQLResponse,\n  GraphQLRequestContext,\n  Logger,\n  SchemaHash,\n} from 'apollo-server-types';\n\n/*\n * GraphQLServerOptions\n *\n * - schema: an executable GraphQL schema used to fulfill requests.\n * - (optional) logger: a `Logger`-compatible implementation to be used for server-level messages.\n * - (optional) formatError: Formatting function applied to all errors before response is sent\n * - (optional) rootValue: rootValue passed to GraphQL execution, or a function to resolving the rootValue from the DocumentNode\n * - (optional) context: the context passed to GraphQL execution\n * - (optional) validationRules: extra validation rules applied to requests\n * - (optional) formatResponse: a function applied to each graphQL execution result\n * - (optional) fieldResolver: a custom default field resolver\n * - (optional) debug: a boolean that will print additional debug logging if execution errors occur\n * - (optional) extensions: an array of functions which create GraphQLExtensions (each GraphQLExtension object is used for one request)\n * - (optional) parseOptions: options to pass when parsing schemas and queries\n *\n */\nexport interface GraphQLServerOptions<\n  TContext = Record<string, any>,\n  TRootValue = any\n> {\n  schema: GraphQLSchema;\n  schemaHash: SchemaHash;\n  logger?: Logger;\n  formatError?: (error: GraphQLError) => GraphQLFormattedError;\n  rootValue?: ((parsedQuery: DocumentNode) => TRootValue) | TRootValue;\n  context?: TContext | (() => never);\n  validationRules?: Array<(context: ValidationContext) => any>;\n  executor?: GraphQLExecutor;\n  formatResponse?: (\n    response: GraphQLResponse,\n    requestContext: GraphQLRequestContext<TContext>,\n  ) => GraphQLResponse | null;\n  fieldResolver?: GraphQLFieldResolver<any, TContext>;\n  debug?: boolean;\n  tracing?: boolean;\n  cacheControl?: CacheControlExtensionOptions;\n  extensions?: Array<() => GraphQLExtension>;\n  dataSources?: () => DataSources<TContext>;\n  cache?: KeyValueCache;\n  persistedQueries?: PersistedQueryOptions;\n  plugins?: ApolloServerPlugin[];\n  documentStore?: InMemoryLRUCache<DocumentNode>;\n  parseOptions?: GraphQLParseOptions;\n}\n\nexport type DataSources<TContext> = {\n  [name: string]: DataSource<TContext>;\n};\n\nexport interface PersistedQueryOptions {\n  cache?: KeyValueCache;\n  /**\n   * Specified in **seconds**, this time-to-live (TTL) value limits the lifespan\n   * of how long the persisted query should be cached.  To specify a desired\n   * lifespan of \"infinite\", set this to `null`, in which case the eviction will\n   * be determined by the cache's eviction policy, but the record will never\n   * simply expire.\n   */\n  ttl?: number | null;\n}\n\nexport default GraphQLServerOptions;\n\nexport async function resolveGraphqlOptions(\n  options:\n    | GraphQLServerOptions\n    | ((...args: Array<any>) => ValueOrPromise<GraphQLServerOptions>),\n  ...args: Array<any>\n): Promise<GraphQLServerOptions> {\n  if (typeof options === 'function') {\n    return await options(...args);\n  } else {\n    return options;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsFA,SAAsBA,qBAAqBA,CACzCC,OAEmE,EAChD;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAhBC,IAAgB,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAhBF,IAAgB,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;EAAA;;IAEnB,IAAI,OAAON,OAAO,KAAK,UAAU,EAAE;MACjC,OAAO,MAAMA,OAAO,CAAC,GAAGI,IAAI,CAAC;KAC9B,MAAM;MACL,OAAOJ,OAAO;;EAElB,CAAC;;AAXDO,OAAA,CAAAR,qBAAA,GAAAA,qBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}