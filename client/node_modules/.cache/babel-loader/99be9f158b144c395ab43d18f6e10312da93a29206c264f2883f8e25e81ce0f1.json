{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.operationHash = exports.defaultOperationRegistrySignature = exports.operationRegistrySignature = exports.defaultUsageReportingSignature = void 0;\nconst transforms_1 = require(\"./transforms\");\nconst createHash_1 = require(\"./utilities/createHash\");\nfunction defaultUsageReportingSignature(ast, operationName) {\n  return (0, transforms_1.printWithReducedWhitespace)((0, transforms_1.sortAST)((0, transforms_1.removeAliases)((0, transforms_1.hideLiterals)((0, transforms_1.dropUnusedDefinitions)(ast, operationName)))));\n}\nexports.defaultUsageReportingSignature = defaultUsageReportingSignature;\nfunction operationRegistrySignature(ast, operationName) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    preserveStringAndNumericLiterals: false\n  };\n  const withoutUnusedDefs = (0, transforms_1.dropUnusedDefinitions)(ast, operationName);\n  const maybeWithLiterals = options.preserveStringAndNumericLiterals ? withoutUnusedDefs : (0, transforms_1.hideStringAndNumericLiterals)(withoutUnusedDefs);\n  return (0, transforms_1.printWithReducedWhitespace)((0, transforms_1.sortAST)(maybeWithLiterals));\n}\nexports.operationRegistrySignature = operationRegistrySignature;\nfunction defaultOperationRegistrySignature(ast, operationName) {\n  return operationRegistrySignature(ast, operationName, {\n    preserveStringAndNumericLiterals: false\n  });\n}\nexports.defaultOperationRegistrySignature = defaultOperationRegistrySignature;\nfunction operationHash(operation) {\n  return (0, createHash_1.createHash)(\"sha256\").update(operation).digest(\"hex\");\n}\nexports.operationHash = operationHash;","map":{"version":3,"names":["transforms_1","require","createHash_1","defaultUsageReportingSignature","ast","operationName","printWithReducedWhitespace","sortAST","removeAliases","hideLiterals","dropUnusedDefinitions","exports","operationRegistrySignature","options","arguments","length","undefined","preserveStringAndNumericLiterals","withoutUnusedDefs","maybeWithLiterals","hideStringAndNumericLiterals","defaultOperationRegistrySignature","operationHash","operation","createHash","update","digest"],"sources":["/Users/venusrodin/node_modules/apollo-graphql/src/operationId.ts"],"sourcesContent":["// In Apollo Studio, we want to group requests making the same query together,\n// and treat different queries distinctly. But what does it mean for two queries\n// to be \"the same\"?  And what if you don't want to send the full text of the\n// query to Apollo's servers, either because it contains sensitive data\n// or because it contains extraneous operations or fragments?\n//\n// To solve these problems, ApolloServerPluginUsageReporting has the concept of\n// \"signatures\". We don't (by default) send the full query string of queries to\n// Apollo's servers. Instead, each trace has its query string's \"signature\".\n//\n// You can technically specify any function mapping a GraphQL query AST\n// (DocumentNode) to string as your signature algorithm by providing it as the\n// 'calculateSignature' option to ApolloServerPluginUsageReporting. (This option\n// is not recommended, because Apollo's servers make some assumptions about the\n// semantics of your operation based on the signature.) This file defines the\n// default function used for this purpose: defaultUsageReportingSignature\n// (formerly known as defaultEngineReportingSignature).\n//\n// This module utilizes several AST transformations from the adjacent\n// 'transforms' module (which are also for writing your own signature method).\n\n// - dropUnusedDefinitions, which removes operations and fragments that\n//   aren't going to be used in execution\n// - hideLiterals, which replaces all numeric and string literals as well\n//   as list and object input values with \"empty\" values\n// - removeAliases, which removes field aliasing from the query\n// - sortAST, which sorts the children of most multi-child nodes\n//   consistently\n// - printWithReducedWhitespace, a variant on graphql-js's 'print'\n//   which gets rid of unneeded whitespace\n//\n// defaultUsageReportingSignature consists of applying all of these building\n// blocks.\n//\n// Historical note: the default signature algorithm of the Go engineproxy\n// performed all of the above operations, and Apollo's servers then re-ran a\n// mostly identical signature implementation on received traces. This was\n// primarily to deal with edge cases where some users used literal interpolation\n// instead of GraphQL variables, included randomized alias names, etc. In\n// addition, the servers relied on the fact that dropUnusedDefinitions had been\n// called in order (and that the signature could be parsed as GraphQL) to\n// extract the name of the operation for display. This caused confusion, as the\n// query document shown in the Studio UI wasn't the same as the one actually\n// sent. ApolloServerPluginUsageReporting (previously apollo-engine-reporting)\n// uses a reporting API which requires it to explicitly include the operation\n// name with each signature; this means that the server no longer needs to parse\n// the signature or run its own signature algorithm on it, and the details of\n// the signature algorithm are now up to the reporting agent. That said, not all\n// Studio features will work properly if your signature function changes the\n// signature in unexpected ways.\n//\n// This file also exports operationRegistrySignature and\n// defaultOperationRegistrySignature, which are slightly different normalization\n// functions used in other contextes.\nimport { DocumentNode } from \"graphql\";\nimport {\n  printWithReducedWhitespace,\n  dropUnusedDefinitions,\n  sortAST,\n  hideStringAndNumericLiterals,\n  removeAliases,\n  hideLiterals,\n} from \"./transforms\";\nimport { createHash } from \"./utilities/createHash\";\n\n// The usage reporting signature function consists of removing extra whitespace,\n// sorting the AST in a deterministic manner, hiding literals, and removing\n// unused definitions.\nexport function defaultUsageReportingSignature(\n  ast: DocumentNode,\n  operationName: string\n): string {\n  return printWithReducedWhitespace(\n    sortAST(\n      removeAliases(hideLiterals(dropUnusedDefinitions(ast, operationName)))\n    )\n  );\n}\n\n// The operation registry signature function consists of removing extra whitespace,\n// sorting the AST in a deterministic manner, potentially hiding string and numeric\n// literals, and removing unused definitions. This is a less aggressive transform\n// than its usage reporting signature counterpart.\nexport function operationRegistrySignature(\n  ast: DocumentNode,\n  operationName: string,\n  options: { preserveStringAndNumericLiterals: boolean } = {\n    preserveStringAndNumericLiterals: false,\n  }\n): string {\n  const withoutUnusedDefs = dropUnusedDefinitions(ast, operationName);\n  const maybeWithLiterals = options.preserveStringAndNumericLiterals\n    ? withoutUnusedDefs\n    : hideStringAndNumericLiterals(withoutUnusedDefs);\n  return printWithReducedWhitespace(sortAST(maybeWithLiterals));\n}\n\nexport function defaultOperationRegistrySignature(\n  ast: DocumentNode,\n  operationName: string\n): string {\n  return operationRegistrySignature(ast, operationName, {\n    preserveStringAndNumericLiterals: false,\n  });\n}\n\nexport function operationHash(operation: string): string {\n  return createHash(\"sha256\").update(operation).digest(\"hex\");\n}\n"],"mappings":";;;;;;AAuDA,MAAAA,YAAA,GAAAC,OAAA;AAQA,MAAAC,YAAA,GAAAD,OAAA;AAKA,SAAgBE,8BAA8BA,CAC5CC,GAAiB,EACjBC,aAAqB;EAErB,OAAO,IAAAL,YAAA,CAAAM,0BAA0B,EAC/B,IAAAN,YAAA,CAAAO,OAAO,EACL,IAAAP,YAAA,CAAAQ,aAAa,EAAC,IAAAR,YAAA,CAAAS,YAAY,EAAC,IAAAT,YAAA,CAAAU,qBAAqB,EAACN,GAAG,EAAEC,aAAa,CAAC,CAAC,CAAC,CACvE,CACF;AACH;AATAM,OAAA,CAAAR,8BAAA,GAAAA,8BAAA;AAeA,SAAgBS,0BAA0BA,CACxCR,GAAiB,EACjBC,aAAqB,EAGpB;EAAA,IAFDQ,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAyD;IACvDG,gCAAgC,EAAE;GACnC;EAED,MAAMC,iBAAiB,GAAG,IAAAlB,YAAA,CAAAU,qBAAqB,EAACN,GAAG,EAAEC,aAAa,CAAC;EACnE,MAAMc,iBAAiB,GAAGN,OAAO,CAACI,gCAAgC,GAC9DC,iBAAiB,GACjB,IAAAlB,YAAA,CAAAoB,4BAA4B,EAACF,iBAAiB,CAAC;EACnD,OAAO,IAAAlB,YAAA,CAAAM,0BAA0B,EAAC,IAAAN,YAAA,CAAAO,OAAO,EAACY,iBAAiB,CAAC,CAAC;AAC/D;AAZAR,OAAA,CAAAC,0BAAA,GAAAA,0BAAA;AAcA,SAAgBS,iCAAiCA,CAC/CjB,GAAiB,EACjBC,aAAqB;EAErB,OAAOO,0BAA0B,CAACR,GAAG,EAAEC,aAAa,EAAE;IACpDY,gCAAgC,EAAE;GACnC,CAAC;AACJ;AAPAN,OAAA,CAAAU,iCAAA,GAAAA,iCAAA;AASA,SAAgBC,aAAaA,CAACC,SAAiB;EAC7C,OAAO,IAAArB,YAAA,CAAAsB,UAAU,EAAC,QAAQ,CAAC,CAACC,MAAM,CAACF,SAAS,CAAC,CAACG,MAAM,CAAC,KAAK,CAAC;AAC7D;AAFAf,OAAA,CAAAW,aAAA,GAAAA,aAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}